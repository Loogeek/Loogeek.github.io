<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Loogeek's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-03-19T16:02:31.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Loogeek]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/05/13/%E7%AC%AC9%E7%AB%A0%20DOM%E5%85%BC%E5%AE%B9%E6%80%A7%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2016/05/13/第9章 DOM兼容性函数/</id>
    <published>2016-05-13T10:25:52.000Z</published>
    <updated>2016-03-19T16:02:31.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">* 添加事件处理函数</span><br><span class="line">* @param &#123;[Object]&#125; element      [绑定事件元素]</span><br><span class="line">* @param &#123;[String]&#125; type         [事件类型]</span><br><span class="line">* @param &#123;[Function]&#125; handler    [事件处理函数]</span><br><span class="line">* element.addEventListener       兼容IE9+等主流游览器</span><br><span class="line">* element.attachEvent            兼容IE6-10</span><br><span class="line">*/</span></span><br><span class="line">  addHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener)&#123;</span><br><span class="line">      element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent)&#123;</span><br><span class="line">      element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span><br><span class="line"> * 获取事件对象函数</span><br><span class="line"> * 在IE中使用 DOM0 级方法添加事件处理程序时,event 对象作为 window 对      象的一个属性存在</span><br><span class="line"> */</span></span><br><span class="line">  getEvent: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span><br><span class="line"> * 获取事件目标函数</span><br><span class="line"> * event.target         兼容IE9+及其他主流游览器</span><br><span class="line"> * event.srcElement     兼容低版本IE游览器</span><br><span class="line"> */</span></span><br><span class="line">  getTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span><br><span class="line"> * 阻止默认行为函数</span><br><span class="line"> * event.returnValue       兼容低版本IE</span><br><span class="line"> */</span></span><br><span class="line">  preventDefault: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.preventDefault)&#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.removeEventListener)&#123;</span><br><span class="line">      element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent)&#123;</span><br><span class="line">      element.detachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * 取消冒泡函数</span><br><span class="line">   * event.cancelBubble      兼容低版本IE</span><br><span class="line">   */</span></span><br><span class="line">  stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.stopPropagation)&#123;</span><br><span class="line">      event.stopPropagation();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * 获取元素客户区大小函数</span><br><span class="line">   * document.body：IE7之前版本</span><br><span class="line">   */</span></span><br><span class="line">  getViewport: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      clientWidth: <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">      clientHeight: <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight,</span><br><span class="line">      scrollTop: <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop,</span><br><span class="line">      scrollWidth: <span class="built_in">document</span>.documentElement.scrollWidth || <span class="built_in">document</span>.body.scrollWidth</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span><br><span class="line"> * 插入文本函数</span><br><span class="line"> * innerText :IE4+、Safari 3+、Opera 8+和 Chrome。Firefox45+    </span><br><span class="line"> * textContent:IE9+、Safari 3+、Opera 10+、Chrome、Firefox。</span><br><span class="line"> */</span></span><br><span class="line">getInnerText: <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">typeof</span> element.innerText == <span class="string">"string"</span>) ? element.innerText : element.textContent;</span><br><span class="line">&#125;,</span><br><span class="line">setInnerText: <span class="function"><span class="keyword">function</span>(<span class="params">element, text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> element.innerText == <span class="string">"string"</span>)&#123;</span><br><span class="line">    element.innerText = text;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    element.textContent = text;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 获取元素类名函数</span><br><span class="line"> * 支持:IE 9+、Firefox 3+、Safari 3.1+、Chrome 和 Opera 9.5+</span><br><span class="line"> */</span></span><br><span class="line">getElementsByClassName: <span class="function"><span class="keyword">function</span>(<span class="params">element,names</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element.getElementsByClassName) &#123;</span><br><span class="line">    <span class="keyword">return</span> element.getElementsByClassName(names);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> elements = element.getElementsByTagName(<span class="string">'*'</span>),</span><br><span class="line">        result = [],</span><br><span class="line">        element,</span><br><span class="line">        classNameStr,</span><br><span class="line">        flag;</span><br><span class="line">    names = names.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">      classNameStr = <span class="string">' '</span> + elements[i].className + <span class="string">' '</span>;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; names.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(classNameStr.indexOf(<span class="string">' '</span> + names[j] + <span class="string">' '</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">          flag = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        result.push(elements[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 获取对象实际样式值</span><br><span class="line"> * getComputedStyle     IE9+及其他主流游览器</span><br><span class="line"> * currentStyle         兼容IE9以下游览器</span><br><span class="line"> */</span></span><br><span class="line">getStyle: <span class="function"><span class="keyword">function</span>(<span class="params">obj,name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(obj.currentStyle)&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.currentStyle[name];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getComputedStyle(obj,<span class="literal">null</span>)[name];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[第8章 事件]]></title>
    <link href="http://yoursite.com/2016/05/13/%E7%AC%AC8%E7%AB%A0%20%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/05/13/第8章 事件/</id>
    <published>2016-05-13T10:25:52.000Z</published>
    <updated>2016-05-08T13:45:33.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;JavaScript 与 HTML 之间的交互是通过事件实现的。事件,就是文档或浏览器窗口中发生的一些特定的交互瞬间。DOM2 级规范开始尝试以一种符合逻辑的方式来标准化 DOM 事件。IE9、Firefox、Opera、 Safari 和 Chrome 全都已经实现了“DOM2 级事件”模块的核心部分。IE8 是最后一个仍然使用其专有事 件系统的主要浏览器。</p>
<h3 id="8-1__u4E8B_u4EF6_u6D41"><a href="#8-1__u4E8B_u4EF6_u6D41" class="headerlink" title="8.1 事件流"></a>8.1 事件流</h3><p>&emsp;&emsp;事件流描述的是从页面中接收事件的顺序。IE的事件流是事件冒泡流,而 Netscape Communicator的事件流是事件捕获流。</p>
<h4 id="8-1-1__u4E8B_u4EF6_u5192_u6CE1"><a href="#8-1-1__u4E8B_u4EF6_u5192_u6CE1" class="headerlink" title="8.1.1 事件冒泡"></a>8.1.1 事件冒泡</h4><p>&emsp;&emsp;IE 的事件流叫做事件冒泡(event bubbling),即事件开始时由最具体的元素(文档中嵌套层次最深 的那个节点)接收,然后逐级向上传播到较为不具体的节点(文档)。所有现代浏览器都支持事件冒泡,但在具体实现上还是有一些差别。IE5.5 及更早版本中的事件冒泡会跳过html元素(从body直接跳到 document)。IE9、Firefox、Chrome 和 Safari 则将事件一直冒泡到 window 对象。</p>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第8章 事件/1.png" style="width:300px;"><br></div>

<h4 id="8-1-2__u4E8B_u4EF6_u6355_u83B7"><a href="#8-1-2__u4E8B_u4EF6_u6355_u83B7" class="headerlink" title="8.1.2 事件捕获"></a>8.1.2 事件捕获</h4><p>&emsp;&emsp;Netscape Communicator 团队提出的另一种事件流叫做事件捕获(event capturing)。事件捕获的思想 是不太具体的节点应该更早接收到事件,而最具体的节点应该最后接收到事件。事件捕获的用意在于在事件到达预定目标之前捕获它。虽然事件捕获是 Netscape Communicator 唯一支持的事件流模型,但 IE9、Safari、Chrome、Opera 和 Firefox 目前也都支持这种事件流模型。尽管“DOM2 级事件”规范要求事件应该从 document 对象开始传播,但这些浏览器都是从 window 对象开始捕获事件的。由于老版本的浏览器不支持,因此很少有人使用事件捕获。</p>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第8章 事件/2.png" style="width:300px;"><br></div>

<h4 id="8-1-3_DOM_u4E8B_u4EF6_u6D41"><a href="#8-1-3_DOM_u4E8B_u4EF6_u6D41" class="headerlink" title="8.1.3 DOM事件流"></a>8.1.3 DOM事件流</h4><p>&emsp;&emsp;“DOM2级事件”规定的事件流包括三个阶段:事件捕获阶段、处于目标阶段和事件冒泡阶段。首 先发生的是事件捕获,为截获事件提供了机会。然后是实际的目标接收到事件。最后一个阶段是冒泡阶 段,可以在这个阶段对事件做出响应。</p>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第8章 事件/3.png" style="width:300px;"><br></div>

<p>&emsp;&emsp;在 DOM 事件流中,实际的目标(div元素)在捕获阶段不会接收到事件。这意味着在捕获阶段,事件从 document 到html再到body后就停止了。下一个阶段是“处于目标”阶段,于是事件在div上发生,在事件处理中被看成冒泡阶段的一部分。然后冒泡阶段发生,事件又传播回文档。</p>
<p>&emsp;&emsp;即使“DOM2 级事件”规范明确要求捕 获阶段不会涉及事件目标,但 IE9、Safari、Chrome、Firefox 和 Opera 9.5 及更高版本都会在捕获阶段触 发事件对象上的事件。结果,就是有两个机会在目标对象上面操作事件。IE9、Opera、Firefox、Chrome 和 Safari 都支持 DOM 事件流;IE8 及更早版本不 支持 DOM 事件流。</p>
<h3 id="8-2__u4E8B_u4EF6_u5904_u7406_u7A0B_u5E8F"><a href="#8-2__u4E8B_u4EF6_u5904_u7406_u7A0B_u5E8F" class="headerlink" title="8.2 事件处理程序"></a>8.2 事件处理程序</h3><p>&emsp;&emsp;事件就是用户或浏览器自身执行的某种动作,而响应某个事件的函数就叫做事件处理程序(或事件侦听器),事件处理程序的名字以”on”开头,因此 click 事件的事件处理程序就是 onclick。</p>
<h4 id="8-2-1_DOM0__u7EA7_u4E8B_u4EF6_u5904_u7406_u7A0B_u5E8F"><a href="#8-2-1_DOM0__u7EA7_u4E8B_u4EF6_u5904_u7406_u7A0B_u5E8F" class="headerlink" title="8.2.1 DOM0 级事件处理程序"></a>8.2.1 DOM0 级事件处理程序</h4><p>&emsp;&emsp;通过 JavaScript 指定事件处理程序的传统方式,就是将一个函数赋值给一个事件处理程序属性。使用 DOM0 级方法指定的事件处理程序被认为是元素的方法。因此,这时候的事件处理程序是在 元素的作用域中运行;换句话说,程序中的 this 引用当前元素。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.id);    <span class="comment">//"myBtn"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;以这种方式添加的事件处理程序会在事件流的冒泡阶段被处理。删除通过 DOM0 级方法指定的事件处理程序只需将事件处理程序属性的值设置为 null 即可:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="literal">null</span>; <span class="comment">//删除事件处理程序</span></span><br></pre></td></tr></table></figure></p>
<h4 id="8-2-2_DOM2__u7EA7_u4E8B_u4EF6_u5904_u7406_u7A0B_u5E8F"><a href="#8-2-2_DOM2__u7EA7_u4E8B_u4EF6_u5904_u7406_u7A0B_u5E8F" class="headerlink" title="8.2.2 DOM2 级事件处理程序"></a>8.2.2 DOM2 级事件处理程序</h4><p>&emsp;&emsp;DOM2 级事件”定义了两个方法,用于处理指定和删除事件处理程序的操作:<strong>addEventListener()</strong> 和 <strong>removeEventListener()</strong>。接受 3 个参数:要处理的事件名、作为事件处理程序的函数和一个布尔值。最后这个布尔值参数如果是 true,表示在捕获阶段调用事件处理程序;如果是false,表示在冒泡阶段调用事件处理程序。</p>
<p>&emsp;&emsp;与 DOM0 级方法一样,这里添加的事件处理程序也是在其依附的元素的作用域 中运行。使用 DOM2 级方法添加事件处理程序的主要好处是可以添加多个事件处理程序。这两个事件处理程序会按照添加它们的顺序触发。</p>
<p>&emsp;&emsp;通过 addEventListener()添加的事件处理程序只能使用 removeEventListener()来移除;移 除时传入的参数与添加处理程序时使用的参数相同。这也意味着通过 addEventListener()添加的匿名函数将无法移除，只能通过如下删除：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.id);</span><br><span class="line">&#125;;</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, handler, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//这里省略了其他代码</span></span><br><span class="line">btn.removeEventListener(<span class="string">"click"</span>, handler, <span class="literal">false</span>); <span class="comment">//有效!</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;大多数情况下,都是将事件处理程序添加到事件流的冒泡阶段,这样可以最大限度地兼容各种浏览 器。最好只在需要在事件到达目标之前截获它的时候将事件处理程序添加到捕获阶段。如果不是特别需 要,我们不建议在事件捕获阶段注册事件处理程序。IE9、Firefox、Safari、Chrome 和 Opera 支持 DOM2 级事件处理程序。</p>
<h4 id="8-2-3_IE_u4E8B_u4EF6_u5904_u7406_u7A0B_u5E8F"><a href="#8-2-3_IE_u4E8B_u4EF6_u5904_u7406_u7A0B_u5E8F" class="headerlink" title="8.2.3 IE事件处理程序"></a>8.2.3 IE事件处理程序</h4><p>&emsp;&emsp;IE 实现了与 DOM 中类似的两个方法:<strong>attachEvent()</strong> 和 <strong>detachEvent()</strong>。这两个方法接受相同 的两个参数:事件处理程序名称与事件处理程序函数。由于 IE8 及更早版本只支持事件冒泡,所以通过 attachEvent()添加的事件处理程序都会被添加到冒泡阶段。</p>
<p>&emsp;&emsp;在 IE 中使用 attachEvent()与使用 DOM0 级方法的主要区别在于事件处理程序的作用域。在使 用 DOM0 级方法的情况下,事件处理程序会在其所属元素的作用域内运行;在使用 attachEvent()方法的情况下,事件处理程序会在全局作用域中运行,因此 this 等于 window。在编写跨浏览器的代码时,牢记这一区别非常重要。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">//true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;attachEvent()方法也可以用来为一个元素添加多个事件处理程序：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"Clicked"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;与 DOM 方法不同的是,这些事件处理程序不是以添加它们的顺序执行,而是以相反的顺序被触发。单击这个例 子中的按钮,首先看到的是”Hello world!”,然后才是”Clicked”。支持 IE 事件处理程序的浏览器有 IE 和 Opera。</p>
<h3 id="8-3__u4E8B_u4EF6_u5BF9_u8C61"><a href="#8-3__u4E8B_u4EF6_u5BF9_u8C61" class="headerlink" title="8.3 事件对象"></a>8.3 事件对象</h3><h4 id="8-3-1_DOM_u4E2D_u7684_u4E8B_u4EF6_u5BF9_u8C61"><a href="#8-3-1_DOM_u4E2D_u7684_u4E8B_u4EF6_u5BF9_u8C61" class="headerlink" title="8.3.1 DOM中的事件对象"></a>8.3.1 DOM中的事件对象</h4><p>&emsp;&emsp;兼容DOM的游览器会将一个event对象传入到事件处理程序中，无论指定事件处理程序时使用什么方法(DOM0 级或 DOM2 级),都会传入 event 对象。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123; alert(event.type); <span class="comment">//"click"</span></span><br><span class="line">&#125;;</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  alert(event.type); <span class="comment">//"click"</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第8章 事件/4.png" style="width:500px;"><br>  <img src="../images/JavaScript高级程序设计/第8章 事件/5.png" style="width:500px;"><br></div>

<p>&emsp;&emsp;在事件处理程序内部,对象 this 始终等于 currentTarget 的值,而 target 则只包含事件的实际目标。如果直接将事件处理程序指定给了目标元素,则 this、currentTarget 和 target 包含相同的值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  alert(event.currentTarget === <span class="keyword">this</span>);<span class="comment">//true</span></span><br><span class="line">  alert(event.target === <span class="keyword">this</span>);       <span class="comment">//true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这个例子检测了currentTarget和target与this的值。由于click事件的目标是按钮,因此这三个值是相等的。如果事件处理程序存在于按钮的父节点中(例如 document.body),那么这些值是不相同的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123; alert(event.currentTarget === <span class="built_in">document</span>.body); <span class="comment">//true</span></span><br><span class="line">alert(<span class="keyword">this</span> === <span class="built_in">document</span>.body); <span class="comment">//true</span></span><br><span class="line">alert(event.target === <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>));<span class="comment">//true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;当单击这个例子中的按钮时,this 和 currentTarget 都等于 document.body,因为事件处理程 序是注册到这个元素上的。然而,target 元素却等于按钮元素,因为它是 click 事件真正的目标。由于按钮上并没有注册事件处理程序,结果 click 事件就冒泡到了 document.body,在那里事件才得到了处理。</p>
<p>&emsp;&emsp;在需要通过一个函数处理多个事件时,可以使用 type 属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(event.type)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"click"</span>:</span><br><span class="line">      alert(<span class="string">"Clicked"</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"mouseover"</span>:</span><br><span class="line">      event.target.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"mouseout"</span>:</span><br><span class="line">      event.target.style.backgroundColor = <span class="string">""</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">btn.onclick = handler;</span><br><span class="line">btn.onmouseover = handler;</span><br><span class="line">btn.onmouseout = handler;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;只有 cancelable 属性设置为 true 的事件,才可以使用 preventDefault()来取消其默认行为。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault(); <span class="comment">//阻止默认行为</span></span><br><span class="line">event.stopPropagation();<span class="comment">//取消事件捕获和冒泡</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;事件对象的 eventPhase 属性,可以用来确定事件当前正位于事件流的哪个阶段。如果是在捕获阶 段调用的事件处理程序,那么 eventPhase 等于 1;如果事件处理程序处于目标对象上,则 eventPhase 等于 2;如果是在冒泡阶段调用的事件处理程序,eventPhase 等于 3。这里要注意的是,尽管<br>“处于目标”发生在冒泡阶段,但 eventPhase 仍然一直等于 2。</p>
<h4 id="8-3-2_IE_u4E2D_u7684_u4E8B_u4EF6_u5BF9_u8C61"><a href="#8-3-2_IE_u4E2D_u7684_u4E8B_u4EF6_u5BF9_u8C61" class="headerlink" title="8.3.2 IE中的事件对象"></a>8.3.2 IE中的事件对象</h4><p>&emsp;&emsp;与访问 DOM 中的 event 对象不同,要访问 IE 中的 event 对象有几种不同的方式,取决于指定事处理程序的方法。在使用 DOM0 级方法添加事件处理程序时,event 对象作为 window 对象的一个属性存在，如果事件处理程序是使用 attachEvent()添加的,那么就会有一个 event 对象作为参数被传入事件处理程序函数中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> event = <span class="built_in">window</span>.event;</span><br><span class="line">  alert(event.type);     <span class="comment">//"click"</span></span><br><span class="line">&#125;;</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;     </span><br><span class="line">  alert(event.type); <span class="comment">//"click"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第8章 事件/6.png" style="width:500px;"><br></div><br>&emsp;&emsp;因为事件处理程序的作用域是根据指定它的方式来确定的,所以不能认为 this 会始终等于事件目标。故而,最好还是使用 event.srcElement 比较保险，第一个事件处理程序中(使用 DOM0 级方法指定的),srcElement属性等于this,但在第二个事件处理程序中this指向window。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">window</span>.event.srcElement === <span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>; <span class="comment">//取消事件的默认行为</span></span><br><span class="line">    <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;<span class="comment">//取消事件冒泡</span></span><br><span class="line">&#125;;</span><br><span class="line">btn.attachEvent(<span class="string">"onclick"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    alert(event.srcElement === <span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这个例子在 onclick 事件处理程序中使用 returnValue 达到了阻止链接默认行为的目的。与 DOM 不同的是,在此没有办法确定事件是否能被取消。</p>
<h4 id="8-3-3__u8DE8_u6D4F_u89C8_u5668_u7684_u4E8B_u4EF6_u5BF9_u8C61"><a href="#8-3-3__u8DE8_u6D4F_u89C8_u5668_u7684_u4E8B_u4EF6_u5BF9_u8C61" class="headerlink" title="8.3.3 跨浏览器的事件对象"></a>8.3.3 跨浏览器的事件对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">  addHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener)&#123;</span><br><span class="line">      element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent)&#123;</span><br><span class="line">      element.attachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getEvent: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">  &#125;,</span><br><span class="line">  getTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">  &#125;,</span><br><span class="line">  preventDefault: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.preventDefault)&#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.removeEventListener)&#123;</span><br><span class="line">      element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent)&#123;</span><br><span class="line">      element.detachEvent(<span class="string">"on"</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.stopPropagation)&#123;</span><br><span class="line">      event.stopPropagation();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="8-4__u4E8B_u4EF6_u7C7B_u578B"><a href="#8-4__u4E8B_u4EF6_u7C7B_u578B" class="headerlink" title="8.4 事件类型"></a>8.4 事件类型</h3><h4 id="8-4-1__u9F20_u6807_u4E0E_u6EDA_u8F6E_u4E8B_u4EF6"><a href="#8-4-1__u9F20_u6807_u4E0E_u6EDA_u8F6E_u4E8B_u4EF6" class="headerlink" title="8.4.1 鼠标与滚轮事件"></a>8.4.1 鼠标与滚轮事件</h4><ul>
<li><strong>mousedown</strong>:在用户按下了任意鼠标按钮时触发。不能通过键盘触发这个事件。</li>
<li><strong>mouseenter</strong>:在鼠标光标从元素外部首次移动到元素范围之内时触发。这个事件不冒泡,而且 在光标移动到后代元素上不会触发。DOM2 级事件并没有定义这个事件,但 DOM3 级事件将它<br>纳入了规范。IE、Firefox 9+和 Opera 支持这个事件。</li>
<li><strong>mouseleave</strong>:在位于元素上方的鼠标光标移动到元素范围之外时触发。这个事件不冒泡,而且<br>在光标移动到后代元素上不会触发。DOM2 级事件并没有定义这个事件,但 DOM3 级事件将它<br>纳入了规范。IE、Firefox 9+和 Opera 支持这个事件。</li>
<li><strong>mousemove</strong>:当鼠标指针在元素内部移动时重复地触发。不能通过键盘触发这个事件。</li>
<li><strong>mouseout</strong>:在鼠标指针位于一个元素上方,然后用户将其移入另一个元素时触发。又移入的另一个元素可能位于前一个元素的外部,也可能是这个元素的子元素。不能通过键盘触发这个事件。</li>
<li><strong>mouseover</strong>:在鼠标指针位于一个元素外部,然后用户将其首次移入另一个元素边界之内时触 发。不能通过键盘触发这个事件。</li>
<li><strong>mouseup</strong>:在用户释放鼠标按钮时触发。不能通过键盘触发这个事件。</li>
</ul>
<h5 id="1-__u5BA2_u6237_u533A_u5750_u6807_u4F4D_u7F6E"><a href="#1-__u5BA2_u6237_u533A_u5750_u6807_u4F4D_u7F6E" class="headerlink" title="1. 客户区坐标位置"></a>1. 客户区坐标位置</h5><p>&emsp;&emsp;鼠标事件都是在浏览器视口中的特定位置上发生的。这个位置信息保存在事件对象的 clientX 和 clientY 属性中。所有浏览器都支持这两个属性,它们的值表示事件发生时鼠标指针在视口中的水平 和垂直坐标。</p>
<p><div style="text-align:center;margin:20px;"><br>  <img src="../images/JavaScript高级程序设计/第8章 事件/7.png" style="width:400px;"><br></div><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">EventUtil.addHandler(div, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    alert(<span class="string">"Client coordinates: "</span> + event.clientX + <span class="string">","</span> + event.clientY);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h5 id="2-__u9875_u9762_u5750_u6807_u4F4D_u7F6E"><a href="#2-__u9875_u9762_u5750_u6807_u4F4D_u7F6E" class="headerlink" title="2. 页面坐标位置"></a>2. 页面坐标位置</h5><p>&emsp;&emsp;通过客户区坐标能够知道鼠标是在视口中什么位置发生的,而页面坐标通过事件对象的 pageX 和 pageY 属性,能告诉你事件是在页面中的什么位置发生的。换句话说,这两个属性表示鼠标光标在页面 中的位置,因此坐标是从页面本身而非视口的左边和顶边计算的。在页面没有滚动的情况下,pageX 和 pageY 的值与 clientX 和 clientY 的值相等。IE8 及更早版本不支持事件对象上的页面坐标,不过使用客户区坐标和滚动信息可以计算出来。这 时候需要用到 document.body(混杂模式)或 document.documentElement(标准模式)中的 scrollLeft 和 scrollTop 属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">EventUtil.addHandler(div, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  event = EventUtil.getEvent(event);</span><br><span class="line">  <span class="keyword">var</span> pageX = event.pageX,</span><br><span class="line">      pageY = event.pageY;</span><br><span class="line">  <span class="keyword">if</span> (pageX === <span class="literal">undefined</span>)&#123;</span><br><span class="line">    pageX = event.clientX + (<span class="built_in">document</span>.body.scrollLeft || <span class="built_in">document</span>.documentElement.scrollLeft);</span><br><span class="line">  &#125;             </span><br><span class="line">  <span class="keyword">if</span> (pageY === <span class="literal">undefined</span>)&#123;</span><br><span class="line">    pageY = event.clientY + (<span class="built_in">document</span>.body.scrollTop ||</span><br><span class="line">    <span class="built_in">document</span>.documentElement.scrollTop);</span><br><span class="line">  &#125;</span><br><span class="line">  alert(<span class="string">"Page coordinates: "</span> + pageX + <span class="string">","</span> + pageY);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h5 id="3-__u5C4F_u5E55_u5750_u6807_u4F4D_u7F6E"><a href="#3-__u5C4F_u5E55_u5750_u6807_u4F4D_u7F6E" class="headerlink" title="3. 屏幕坐标位置"></a>3. 屏幕坐标位置</h5><p><div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第8章 事件/8.png" style="width:400px;"><br></div><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  EventUtil.addHandler(div, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event = EventUtil.getEvent(event);</span><br><span class="line">    alert(<span class="string">"Screen coordinates: "</span> + event.screenX + <span class="string">","</span> + event.screenY);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;JavaScript 与 HTML 之间的交互是通过事件实现的。事件,就是文档或浏览器窗口中发生的一些特定的交互瞬间。DOM2 级规范开始尝试以一种符合逻辑的方式来标准化 DOM 事件。IE9、Firefox、Opera、 Safari 和 Chro]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[第7章 DOM2和DOM3]]></title>
    <link href="http://yoursite.com/2016/05/13/%E7%AC%AC7%E7%AB%A0%20DOM2%E5%92%8CDOM3/"/>
    <id>http://yoursite.com/2016/05/13/第7章 DOM2和DOM3/</id>
    <published>2016-05-13T10:25:52.000Z</published>
    <updated>2016-05-08T10:12:29.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;DOM1 级主要定义的是 HTML 和 XML 文档的底层结构。DOM2 和 DOM3 级则在这个结构的基础上引入了更多的交互能力,也支持了更高级的 XML 特性。</p>
<h3 id="7-1__u6837_u5F0F"><a href="#7-1__u6837_u5F0F" class="headerlink" title="7.1 样式"></a>7.1 样式</h3><div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第7章 DOM2和DOM3/4.png" width="500"><br></div>

<p>&emsp;&emsp;HTML 中定义样式的方式有 3 种:通过link元素包含外部样式表文件、使用style元素定义嵌入式样式,以及使用 style 特性定义针对特定元素的样式。“DOM2 级样式”模块围绕这 3 种应用 样式的机制提供了一套 API。要确定浏览器是否支持 DOM2 级定义的 CSS 能力,可以使用下列代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> supportsDOM2CSS = <span class="built_in">document</span>.implementation.hasFeature(<span class="string">"CSS"</span>, <span class="string">"2.0"</span>); <span class="keyword">var</span> supportsDOM2CSS2 = <span class="built_in">document</span>.implementation.hasFeature(<span class="string">"CSS2"</span>, <span class="string">"2.0"</span>);</span><br></pre></td></tr></table></figure></p>
<h4 id="1-_u8BBF_u95EE_u5143_u7D20_u7684_u6837_u5F0F"><a href="#1-_u8BBF_u95EE_u5143_u7D20_u7684_u6837_u5F0F" class="headerlink" title="1.访问元素的样式"></a>1.访问元素的样式</h4><p>&emsp;&emsp;任何支持 style 特性的 HTML 元素在 JavaScript 中都有一个对应的 style 属性。这个 style 对象是 CSSStyleDeclaration 的实例,包含着通过 HTML 的 style 特性指定的所有样式信息,不包含 与外部样式表或嵌入样式表(内部样式)。在 style 特性中指定的任何 CSS 属性都将表现为这个 style 对象的相应属性。对于使用短划线(分隔不同的词汇,例如 background-image)的 CSS 属性 名,必须将其转换成驼峰大小写形式,才能通过 JavaScript 来访问。下表列出了几个常见的 CSS 属性及 其在 style 对象中对应的属性名。</p>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第7章 DOM2和DOM3/5.png" width="500"><br></div>

<p>&emsp;&emsp;多数情况下,都可以通过简单地转换属性名的格式来实现转换。其中一个不能直接转换的 CSS 属性 就是 float。由于 float 是 JavaScript 中的保留字,因此不能用作属性名。“DOM2 级样式”规范规定 样式对象上相应的属性名应该是 cssFloat;Firefox、Safari、Opera 和 Chrome 都支持这个属性,而 IE 支持的则是 styleFloat。兼容性写法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.style.styleFloat = <span class="string">"value"</span>;</span><br><span class="line">element.style.cssFloat = <span class="string">"value"</span>;</span><br></pre></td></tr></table></figure></p>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第7章 DOM2和DOM3/8.png" width="400"><br></div>

<ol>
<li><p>整个页面的全部样式（不包括行内样式）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.styleSheets</span><br></pre></td></tr></table></figure>
</li>
<li><p>外部和内部样式表</p>
</li>
</ol>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第7章 DOM2和DOM3/6.png" width="400"><br></div>

<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="stylesheet" type="text/css" href="sample.css"&gt;</span><br><span class="line">var element = document.querySelector('link');</span><br><span class="line">// 通过element.sheet调用</span><br><span class="line">&lt;style type="text/css" media="screen"&gt;</span><br><span class="line">  p&#123;color: #aaa; line-height:20px&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">var element = document.querySelector('style');</span><br><span class="line">// 1.对应所有样式的列表</span><br><span class="line">element.sheet.cssRules; //p&#123;color: #aaa; line-height:20px&#125;</span><br><span class="line">// 2.对应相应的 CSS 选择器</span><br><span class="line">element.sheet.cssRules[0].selectorText;//p</span><br><span class="line">//3.对应所有样式的键值对</span><br><span class="line">element.sheet.cssRules[0].style;//color: #aaa; line-height:20px</span><br><span class="line">//4.对应的属性值</span><br><span class="line">element.sheet.cssRules[1].lineHeight;//20px</span><br><span class="line">// 通过element.sheet调用</span><br></pre></td></tr></table></figure>
<ol>
<li><p>行内样式<br><div style="text-align:center;margin-bottom:20px;"><br><img src="../images/JavaScript高级程序设计/第7章 DOM2和DOM3/7.png" width="400"><br></div></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style="color:red"&gt;Text Color&lt;/p&gt;</span><br><span class="line">var element = document.querySelector('p');</span><br><span class="line">// 通过element.style调用</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新样式</p>
<p><strong>element.style.cssText</strong>:一次同时设置多个行内样式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.style.cssText = <span class="string">'color: red; background: black'</span>;</span><br></pre></td></tr></table></figure>
<p>更新class</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.angry &#123;</span><br><span class="line">  color: red;</span><br><span class="line">  background: black;</span><br><span class="line">&#125;</span><br><span class="line">element.className += <span class="string">' angry'</span>;</span><br><span class="line"><span class="comment">//或者通过setAttribute修改外部样式链接名称</span></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"style1.css"</span>&gt;</span><br><span class="line">element.setAttribute(<span class="string">'href'</span>, <span class="string">'style2.css'</span>);</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">element.href = <span class="string">'style2.css'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取样式</p>
</li>
</ol>
<p>&emsp;&emsp;通过element.style只能获取行间样式表,如果行内没有设置style样式，则只能获取空值，无法获取到元素默认样式，可通过getComputedStyle()方法获取当前元素的所有计算的样式，接受两个参数:要取得计算样式的元素和一个伪元素字符串(例 如”:after”)。如果不需要伪元素信息,第二个参数可以是 null。该方法返回一个CSSStyleDeclaration 对象(与 style 属性的类型相同)，其中包含当前元素的所有计算的样式。IE9以下不支持 getComputedStyle()方法,可使用 currentStyle 属性替代。这个属性是 CSSStyleDeclaration 的实例。兼容写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 获取对象实际样式值</span><br><span class="line"> * getComputedStyle     IE9+及其他主流游览器</span><br><span class="line"> * currentStyle         兼容IE9以下游览器</span><br><span class="line">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(obj.currentStyle)&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.currentStyle[name];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getComputedStyle(obj,<span class="literal">null</span>)[name];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="7-2__u5143_u7D20_u5927_u5C0F"><a href="#7-2__u5143_u7D20_u5927_u5C0F" class="headerlink" title="7.2 元素大小"></a>7.2 元素大小</h3><h4 id="1-_u504F_u79FB_u91CF"><a href="#1-_u504F_u79FB_u91CF" class="headerlink" title="1.偏移量"></a>1.偏移量</h4><p>&emsp;&emsp;通过下列 4 个属性可以取得元素的偏移量。</p>
<ul>
<li><strong>offsetHeight</strong>:元素在垂直方向上占用的空间大小,以像素计。包括元素的高度、(可见的)水平滚动条的高度、上边框高度和下边框高度。</li>
<li><strong>offsetWidth</strong>:元素在水平方向上占用的空间大小,以像素计。包括元素的宽度、(可见的)垂直滚动条的宽度、左边框宽度和右边框宽度。</li>
<li><strong>offsetLeft</strong>:元素的左外边框至包含元素的左内边框之间的像素距离。</li>
<li><strong>offsetTop</strong>:元素的上外边框至包含元素的上内边框之间的像素距离。</li>
</ul>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第7章 DOM2和DOM3/1.png" width="400"><br></div>

<p>&emsp;&emsp;要想知道某个元素在页面上的偏移量,将这个元素的 offsetLeft 和 offsetTop 与其 offsetParent 的相同属性相加,如此循环直至根元素,就可以得到一个基本准确的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementLeft</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actualLeft = element.offsetLeft;</span><br><span class="line">  <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>)&#123;</span><br><span class="line">    actualLeft += current.offsetLeft;</span><br><span class="line">    current = current.offsetParent;</span><br><span class="line">  &#125;         </span><br><span class="line">  <span class="keyword">return</span> actualLeft;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementTop</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> actualTop = element.offsetTop;</span><br><span class="line">  <span class="keyword">var</span> current = element.offsetParent;</span><br><span class="line">  <span class="keyword">while</span> (current !== <span class="literal">null</span>)&#123;</span><br><span class="line">      actualTop += current.offsetTop;</span><br><span class="line">      current = current.offsetParent;</span><br><span class="line">  &#125;   </span><br><span class="line">  <span class="keyword">return</span> actualTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;所有这些偏移量属性都是只读的,而且每次访问它们都需要重新计算。因此,应 该尽量避免重复访问这些属性;如果需要重复使用其中某些属性的值,可以将它们保 存在局部变量中,以提高性能。</p>
<h4 id="2-_u5BA2_u6237_u533A_u5927_u5C0F"><a href="#2-_u5BA2_u6237_u533A_u5927_u5C0F" class="headerlink" title="2.客户区大小"></a>2.客户区大小</h4><p>&emsp;&emsp;元素的客户区大小(client dimension),指的是元素内容及其内边距所占据的空间大小。属性有两个:<strong>clientWidth</strong> 和 <strong>clientHeight。其中</strong>,clientWidth 属性是元素内容区宽度加上左右内边距宽度;clientHeight属性是元素内容区高度加上上下内边距高度。</p>
<p><strong>clientHeight = 元素高度 + 元素上下padding - 水平滚动条高度</strong></p>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第7章 DOM2和DOM3/2.png" width="400"><br></div>

<p>&emsp;&emsp;要确定浏览器视口大小,可以使用document.documentElement 或 document.body(在 IE7 之前的版本中)的 clientWidth 和 clientHeight。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewport</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    clientWidth: <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">    clientHeight: <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="3-_u6EDA_u52A8_u5927_u5C0F"><a href="#3-_u6EDA_u52A8_u5927_u5C0F" class="headerlink" title="3.滚动大小"></a>3.滚动大小</h4><p>&emsp;&emsp;滚动大小(scroll dimension),指的是包含滚动内容的元素的大小，以下是4个与滚动大小相关的属性。</p>
<ul>
<li>scrollHeight:在没有滚动条的情况下,元素内容的总高度。</li>
<li>scrollWidth:在没有滚动条的情况下,元素内容的总宽度。</li>
<li>scrollLeft:被隐藏在内容区域左侧的像素数。通过设置这个属性可以改变元素的滚动位置。</li>
<li>scrollTop:被隐藏在内容区域上方的像素数。通过设置这个属性可以改变元素的滚动位置。</li>
</ul>
<p><strong>element.scrollHeight - element.scrollTop === element.clientHeight</strong></p>
<p>&emsp;&emsp;scrollWidth 和 scrollHeight 主要用于确定元素内容的实际大小。例如,通常认为html元素<br>是在 Web 浏览器的视口中滚动的元素(IE6 之前版本运行在混杂模式下时是body元素)。因此,带有垂直滚动条的页面总高度就是 document.documentElement.scrollHeight。</p>
<p>&emsp;&emsp;对于不包含滚动条的页面而言,scrollWidth 和 scrollHeight 与 clientWidth 和 clientHeight 之间的关系并不十分清晰。在这种情况下,基于 document.documentElement 查看 这些属性会在不同浏览器间发现一些不一致性问题,如下所述。</p>
<ul>
<li>Firefox 中这两组属性始终都是相等的,但大小代表的是文档内容区域的实际尺寸,而非视口的 尺寸。</li>
<li>Opera、Safari 3.1 及更高版本、Chrome 中的这两组属性是有差别的,其中 scrollWidth 和scrollHeight 等于视口大小,而 clientWidth 和 clientHeight 等于文档内容区域的大小。</li>
<li>IE(在标准模式)中的这两组属性不相等,其中 scrollWidth 和 scrollHeight 等于文档内容区域的大小,而 clientWidth 和 clientHeight 等于视口大小。</li>
</ul>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第7章 DOM2和DOM3/3.png" width="400"><br></div>

<p>&emsp;&emsp;在确定文档的总高度时(包括基于视口的最小高度时),必须取得 scrollWidth/clientWidth 和 scrollHeight/clientHeight 中的最大值,才能保证在跨浏览器的环境下得到精确的结果。下面就是这样一个例子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docHeight = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollHeight, <span class="built_in">document</span>.documentElement.clientHeight);</span><br><span class="line"><span class="keyword">var</span> docWidth = <span class="built_in">Math</span>.max(<span class="built_in">document</span>.documentElement.scrollWidth, <span class="built_in">document</span>.documentElement.clientWidth);</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;<strong>注意</strong>：对于运行在混杂模式下的 IE,则需要用 <strong>document.body</strong> 代替 <strong>document.documentElement</strong>。</p>
<h3 id="offsetWidth_clientWidth_scrollWidth__u5BF9_u6BD4"><a href="#offsetWidth_clientWidth_scrollWidth__u5BF9_u6BD4" class="headerlink" title="offsetWidth clientWidth scrollWidth 对比"></a>offsetWidth clientWidth scrollWidth 对比</h3><p><a href="http://jsfiddle.net/shibualexis/yVhgM/3/" target="_blank" rel="external">http://jsfiddle.net/shibualexis/yVhgM/3/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;DOM1 级主要定义的是 HTML 和 XML 文档的底层结构。DOM2 和 DOM3 级则在这个结构的基础上引入了更多的交互能力,也支持了更高级的 XML 特性。</p>
<h3 id="7-1__u6837_u5F0F"><a href="#7-]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[第6章 DOM]]></title>
    <link href="http://yoursite.com/2016/05/13/%E7%AC%AC6%E7%AB%A0%20DOM/"/>
    <id>http://yoursite.com/2016/05/13/第6章 DOM/</id>
    <published>2016-05-13T10:25:52.000Z</published>
    <updated>2016-05-07T07:28:42.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;DOM(文档对象模型)是针对 HTML 和 XML 文档的一个 API(应用程序编程接口)。DOM 描 绘了一个层次化的节点树,允许开发人员添加、移除和修改页面的某一部分。</p>
<h2 id="6-1__u8282_u70B9_u5C42_u6B21"><a href="#6-1__u8282_u70B9_u5C42_u6B21" class="headerlink" title="6.1 节点层次"></a>6.1 节点层次</h2><h3 id="6-1-1_Node_u7C7B_u578B"><a href="#6-1-1_Node_u7C7B_u578B" class="headerlink" title="6.1.1 Node类型"></a>6.1.1 Node类型</h3><h5 id="u4E00_u3001_u6BCF_u4E2A_u8282_u70B9_u90FD_u5177_u6709_u7684_u5C5E_u6027_u548C_u65B9_u6CD5"><a href="#u4E00_u3001_u6BCF_u4E2A_u8282_u70B9_u90FD_u5177_u6709_u7684_u5C5E_u6027_u548C_u65B9_u6CD5" class="headerlink" title="一、每个节点都具有的属性和方法"></a>一、每个节点都具有的属性和方法</h5><ol>
<li><strong>childNodes</strong>:保存着一个 NodeList 对象。NodeList 是一种类数组对象,是基于 DOM 结构动态执行查询的结果, DOM 结构的变化能够自动反映 在 NodeList 对象中;</li>
<li><strong>parentNode</strong>:指向文档树中的父节点。 previousSibling 指向上一个同胞节点，nextSibling 指向下一个同胞节点。firstChild 指向第一个子节点，lastChild 指向最后一个子节点;</li>
<li><strong>ownerDocument</strong>:指向表示整个文档的文档节点。这种关系表示的是任何节点都属于它所在的文档,任何节点都不能同时存在于两个或更多个文档中。通过这个属性,我们可以不必在节点层次中通过层层回溯到达顶端,而是可以直接访问文档节点。</li>
<li><strong>hasChildNodes()</strong>:在节点包含一或多个子节点的情况下返回 true;</li>
<li><strong>cloneNode()</strong>:用于创建调用这个方法的节点的一个完全相同的副本。cloneNode()方法接受一个布尔值参数,表示是否执行深复制，在参数为 true 的情况下,执行深复制,也就是复制节点及其整个子节点树;在参数为 false 的情况下,执行浅复制, 即只复制节点本身。复制后返回的节点副本属于文档所有,但并没有为它指定父节点。cloneNode()方法不会复制添加到DOM节点上的JavaScript属性，例如事件处理程序等。只复制特性、(在明确指定的情况下也复制)子节点，其他一切都不会复制。IE存在一个bug，会复制事件处理程序，所以建议复制前最好移除事件处理程序。</li>
<li><strong>normalize()</strong>:作用就是处理文档树中的文本节点,由于解析器的实现或 DOM 操作等原因,可能会出现文本节点不包含文本,或者接连出现两个文本节点 的情况。当在某个节点上调用这个方法时,就会在该节点的后代节点中查找上述两种情况。如果找到了 空文本节点,则删除它;如果找到相邻的文本节点,则将它们合并为一个文本节点。</li>
</ol>
<h5 id="u4E8C_u3001_u7236_u8282_u70B9_u90FD_u5177_u6709_u7684_u65B9_u6CD5_u662F"><a href="#u4E8C_u3001_u7236_u8282_u70B9_u90FD_u5177_u6709_u7684_u65B9_u6CD5_u662F" class="headerlink" title="二、父节点都具有的方法是"></a>二、父节点都具有的方法是</h5><ol>
<li><strong>appendChild()</strong>:用于向 childNodes 列表的末尾添加一个节点,如果传入到 appendChild()中的节点已经是文档的一部分了,那结果就是将该节点从原来的位置 转移到新位置。</li>
<li><strong>insertBefore()</strong>:把节点放在 childNodes 列表中某个特定的位置上,而不是放在末尾,接受两个参数:要插入的节点和作为参照的节点，如果参照节点是 null,则 insertBefore()与 appendChild()执行相同的操作。</li>
<li><strong>replaceChild()</strong>:要插入的节点和要替换的节点，被替换的节点仍然还在文档中,但它在文档中已经没有了自己的位置。</li>
<li><strong>removeChild()</strong>:这个方法接受一个参数,即要移除的节点。被移除的节点将成为方法的返回值，移除的节点仍然为文档所有,只不过在 文档中已经没有了自己的位置。</li>
</ol>
<h3 id="6-1-2_Document_u7C7B_u578B"><a href="#6-1-2_Document_u7C7B_u578B" class="headerlink" title="6.1.2 Document类型"></a>6.1.2 Document类型</h3><p>&emsp;&emsp;JavaScript 通过 Document 类型表示文档。在浏览器中,document 对象是 HTMLDocument(继承自 Document 类型)的一个实例,表示整个 HTML 页面。而且,document 对象是 window 对象的一个 属性,因此可以将其作为全局对象来访问。</p>
<p>&emsp;&emsp;特征：nodeType 的值为 9;nodeName 的值为”#document”。</p>
<h4 id="1-_u6587_u6863_u5B50_u8282_u70B9"><a href="#1-_u6587_u6863_u5B50_u8282_u70B9" class="headerlink" title="1.文档子节点"></a>1.文档子节点</h4><p>&emsp;&emsp;页面在经过浏览器解析后,其文档中只包含一个子节点,即<html>元素。可以通过 documentElement 或 childNodes 列表来访问这个元素,即<br><strong>document.documentElement === document.childNodes[0]=== document.firstChild</strong><br>作为 HTMLDocument 的实例,document 对象还有一个 body 属性,直接指向<body>元素。因为开 发人员经常要使用这个元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body; <span class="comment">//取得对&lt;body&gt;的引用</span></span><br></pre></td></tr></table></figure></body></html></p>
<p>&emsp;&emsp;所有浏览器都支持 document.documentElement 和 document.body 属性。</p>
<h4 id="2-_u67E5_u627E_u5143_u7D20"><a href="#2-_u67E5_u627E_u5143_u7D20" class="headerlink" title="2.查找元素"></a>2.查找元素</h4><ol>
<li><strong>getElementById()</strong>：接收一个参数:要取得的元素的ID；</li>
<li><strong>getElementsByTagName()</strong>：这个方法接受一个参数,即要取得元素的标签名，返回的是包含零或多个元素的 NodeList。在 HTML 文档中,这个方法会返回一 个 HTMLCollection 对象；</li>
<li><strong>getElementsByName()</strong>：只有 HTMLDocument 类型才有的方法，返回带有给定 name 特性的所有元素；</li>
<li><strong>getElementsByClassName()</strong>：返回带有 指定类的所有元素的 NodeList，支持 getElementsByClassName()方法的浏览器有 IE 9+、Firefox 3+、Safari 3.1+、Chrome 和 Opera 9.5+；</li>
<li><p><strong>querySelector()</strong>：接收一个 CSS 选择符,返回与该模式匹配的第一个元素,如果没有找到匹配的元素,返回 null。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取得 body 元素</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>);</span><br><span class="line"><span class="comment">//取得 ID 为"myDiv"的元素</span></span><br><span class="line"><span class="keyword">var</span> myDiv = <span class="built_in">document</span>.querySelector(<span class="string">"#myDiv"</span>);</span><br><span class="line"><span class="comment">//取得类为"selected"的第一个元素</span></span><br><span class="line"><span class="keyword">var</span> selected = <span class="built_in">document</span>.querySelector(<span class="string">".selected"</span>);</span><br><span class="line"><span class="comment">//取得类为"button"的第一个图像元素</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.body.querySelector(<span class="string">"img.button"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>querySelectorAll()</strong>：返回的值实际上是带有所有属性和方法的 NodeList,而其底层实现则类似于一组元素的快照,而非不断对文档进行搜索的动态查询，即不会动态查询。querySelector()/querySelectorAll()兼容IE9+;</p>
<div style="text-align:center;margin:20px;"><br><img src="../images/JavaScript高级程序设计/第6章 DOM/1.png" width="400"><br></div>

</li>
</ol>
<h3 id="6-1-3_Element_u7C7B_u578B"><a href="#6-1-3_Element_u7C7B_u578B" class="headerlink" title="6.1.3 Element类型"></a>6.1.3 Element类型</h3><p>&emsp;&emsp;作特性的 DOM 方法主要有三个,分别是 <strong>getAttribute()</strong>、<strong>setAttribute()</strong> 和 <strong>removeAttribute()</strong>。</p>
<h4 id="1-_u53D6_u5F97_u7279_u6027"><a href="#1-_u53D6_u5F97_u7279_u6027" class="headerlink" title="1.取得特性"></a>1.取得特性</h4><p>&emsp;&emsp;有两类特殊的特性,它们虽然有对应的属性名,但属性的值与通过 getAttribute()返回的值并不相同。第一类特性就是 style,用于通过 CSS 为元素指定样式。在通过 getAttribute()访问时,返回的 style 特性值中包含的是 CSS 文本,而通过属性来访问它则会返回一个对象。由于 style 属性是用于以编程方式访问元素样式的,因此并没有直接映射到 style 特性。</p>
<p>&emsp;&emsp;第二类与众不同的特性是 onclick 这样的事件处理程序。当在元素上使用时,onclick 特性中包含的是 JavaScript 代码,如果通过 getAttribute()访问,则会返回相应代码的字符串。而在访问 onclick 属性时,则会返回一个 JavaScript 函数(如果未在元素中指定相应特性,则返回 null)。这是因为 onclick 及其他事件处理程序属性本身就应该被赋予函数值。</p>
<p>&emsp;&emsp;由于存在这些差别,在通过 JavaScript 以编程方式操作 DOM 时,开发人员经常不使用 getAttribute(),而是只使用对象的属性。只有在取得自定义特性值的情况下,才会使用 getAttribute()方法。</p>
<p>&emsp;&emsp;dataset自定义属性，其为 HTMLElement 上的属性也是 data-* 的属性集。主要用于在元素上保存数据。获取的均为属性字符串dataset支持游览器为IE11+。如下dataset兼容写法：</p>
<p><div style="text-align:center;margin:20px;"><br>  <img src="../images/JavaScript高级程序设计/第6章 DOM/2.png" width="400"><br></div><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDataSet</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(element.dataset)&#123;</span><br><span class="line">     <span class="keyword">return</span> element.dataset;  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> attrs= element.attributes;</span><br><span class="line">  <span class="keyword">var</span> data=&#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;attrs.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(attrs[i].name.substring(<span class="number">0</span>,<span class="number">5</span>)===<span class="string">"data-"</span>)&#123;</span><br><span class="line">       nodeNames=attrs[i].name.slice(<span class="number">5</span>).split(<span class="string">"-"</span>);</span><br><span class="line">       nodeName=nodeNames[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;nodeNames.length;j++)&#123;</span><br><span class="line">        <span class="comment">// 如data-aa-bb</span></span><br><span class="line">        <span class="comment">// nodeName为aa</span></span><br><span class="line">        <span class="comment">// nodeName[j].slice(0,1).toUpperCase()为B</span></span><br><span class="line">        <span class="comment">// nodeNames[j].slice(1)为b</span></span><br><span class="line">        nodeName=nodeName+nodeNames[j].slice(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+nodeNames[j].slice(<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       data[nodeName]=attrs[i].value;</span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="2-_u8BBE_u7F6E_u7279_u6027"><a href="#2-_u8BBE_u7F6E_u7279_u6027" class="headerlink" title="2.设置特性"></a>2.设置特性</h4><p>&emsp;&emsp;<strong>setAttribute()</strong>:要设置的特性名和值。如果特性已经存在, 会以指定的值替换现有的值;如果特性不存在,setAttribute() 则创建该属性并设置相应的值；像下面这样为 DOM 元素添加一个自定义的属性,该属性不会自动成为元素的特性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div.mycolor = <span class="string">"red"</span>;</span><br><span class="line">alert(div.getAttribute(<span class="string">"mycolor"</span>)); <span class="comment">//null(IE 除外)</span></span><br></pre></td></tr></table></figure></p>
<h4 id="3-_u521B_u5EFA_u5143_u7D20"><a href="#3-_u521B_u5EFA_u5143_u7D20" class="headerlink" title="3.创建元素"></a>3.创建元素</h4><p> <strong>document.createElement()</strong></p>
<h4 id="4-_u5143_u7D20_u7684_u5B50_u8282_u70B9"><a href="#4-_u5143_u7D20_u7684_u5B50_u8282_u70B9" class="headerlink" title="4.元素的子节点"></a>4.元素的子节点</h4><p>&emsp;&emsp;元素的 <strong>childNodes</strong> 属性中包含了它的所有子节点,这些子节点有可能是元素、文本节点、注释或处理指令。 不同浏览器在看待这些节点方面存在显著的不同，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"myList"</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;在IE6-8下ul元素会有 3 个子节点,分别是3个li元素。但如果是在其他浏览器中,ul元素都会有 7 个元素,包括 3 个li元素和 4 个文本节点(表示li元素之间的空白符)。可通过检查 一下 <strong>nodeTpye</strong> 属性来进行判断操作，也可以通过 <strong>children</strong> 属性直接获得元素子节点。</p>
<p>&emsp;&emsp;对于元素间的空格,IE9 及之前版本不会返回文本节点,而其他所有浏览器都会返回文本节点。这样, 就导致了在使用 <strong>childNodes</strong> 和 <strong>firstChild</strong> 等属性时的行为不一致，可通过下面5个属性保持一致性：</p>
<ul>
<li><strong>childElementCount</strong>:返回子元素(不包括文本节点和注释)的个数。</li>
<li><strong>firstElementChild</strong>:指向第一个子元素;firstChild 的元素版。</li>
<li><strong>lastElementChild</strong>:指向最后一个子元素;lastChild 的元素版。</li>
<li><strong>previousElementSibling</strong>:指向前一个同辈元素;previousSibling 的元素版。</li>
<li><strong>nextElementSibling</strong>:指向后一个同辈元素;nextSibling 的元素版。</li>
</ul>
<p>&emsp;&emsp;支持浏览器有IE 9+、Firefox 3.5+、Safari 4+、Chrome 和 Opera 10+。</p>
<h3 id="6-2_HTML5_u5BF9DOM_u7684_u6269_u5145"><a href="#6-2_HTML5_u5BF9DOM_u7684_u6269_u5145" class="headerlink" title="6.2 HTML5对DOM的扩充"></a>6.2 HTML5对DOM的扩充</h3><h4 id="1-getElementsByClassName_28_29_u65B9_u6CD5"><a href="#1-getElementsByClassName_28_29_u65B9_u6CD5" class="headerlink" title="1.getElementsByClassName()方法"></a>1.getElementsByClassName()方法</h4><p>&emsp;&emsp;支持 getElementsByClassName()方法的浏览器有 IE 9+、Firefox 3+、Safari 3.1+、Chrome 和 Opera 9.5+。<br>兼容getElementsByClassName：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementsByClassName</span>(<span class="params">element,names</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element.getElementsByClassName) &#123;</span><br><span class="line">    <span class="keyword">return</span> element.getElementsByClassName(names);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> elements = element.getElementsByTagName(<span class="string">'*'</span>),</span><br><span class="line">        result = [],</span><br><span class="line">        element,</span><br><span class="line">        classNameStr,</span><br><span class="line">        flag;</span><br><span class="line">    names = names.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">      classNameStr = <span class="string">' '</span> + elements[i].className + <span class="string">' '</span>;  <span class="comment">//必须添加空格，不然'user1'.indexOf('user')输出0</span></span><br><span class="line">                                                         <span class="comment">//' user1 '.indexOf(' user ') === -1</span></span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; names.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(classNameStr.indexOf(<span class="string">' '</span> + names[j] + <span class="string">' '</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">          flag = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        result.push(elements[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="2-classList__u5C5E_u6027"><a href="#2-classList__u5C5E_u6027" class="headerlink" title="2.classList 属性"></a>2.classList 属性</h4><p>&emsp;&emsp;HTML5 新增了一种操作类名的方式,可以让操作更简单也更安全,那就是为所有元素添加 classList 属性。这个 classList 属性是新集合类型 DOMTokenList 的实例。新类型还定义如下方法：</p>
<ul>
<li><strong>add(value)</strong>:将给定的字符串值添加到列表中。如果值已经存在,就不添加了。</li>
<li><strong>contains(value)</strong>:表示列表中是否存在给定的值,如果存在则返回 true,否则返回 false。</li>
<li><strong>remove(value)</strong>:从列表中删除给定的字符串。</li>
<li><strong>toggle(value)</strong>:如果列表中已经存在给定的值,删除它;如果列表中没有给定的值,添加它。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除"disabled"类</span></span><br><span class="line">div.classList.remove(<span class="string">"disabled"</span>);</span><br><span class="line"><span class="comment">//添加"current"类</span></span><br><span class="line">div.classList.add(<span class="string">"current"</span>);</span><br><span class="line"><span class="comment">//切换"user"类</span></span><br><span class="line">div.classList.toggle(<span class="string">"user"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>支持 classList 属性的浏览器有 Firefox 3.6+, Chrome,Safari9+,IE10/11部分支持。</p>
<h4 id="3-_u7126_u70B9_u7BA1_u7406"><a href="#3-_u7126_u70B9_u7BA1_u7406" class="headerlink" title="3.焦点管理"></a>3.焦点管理</h4><ul>
<li><strong>document.activeElement</strong>:始终引用 DOM 中当前获得了焦点的元素，默认情况下,文档刚刚加载完成时,document.activeElement 中保存的是 document.body 元 素的引用。文档加载期间,document.activeElement 的值为 null。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">"myButton"</span>);</span><br><span class="line">button.focus();</span><br><span class="line">alert(<span class="built_in">document</span>.activeElement === button);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>&emsp;&emsp;支持IE 4+、Firefox 3+、Safari 4+、Chrome 和 Opera 8+。</p>
<h4 id="4-_u63D2_u5165_u6807_u8BB0"><a href="#4-_u63D2_u5165_u6807_u8BB0" class="headerlink" title="4.插入标记"></a>4.插入标记</h4><ul>
<li><strong>innerHTML 属性</strong><br>&emsp;&emsp;在读模式下,innerHTML 属性返回与调用元素的所有子节点(包括元素、注释和文本节点)对应 的 HTML 标记。在写模式下,innerHTML 会根据指定的值创建新的 DOM 树,然后用这个 DOM 树完全 替换调用元素原先的所有子节点。</li>
</ul>
<p>&emsp;&emsp;为 innerHTML 设置的包含 HTML 的字符串值与解析后 innerHTML 的值大不相同。来看下面的<br>例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.innerHTML = <span class="string">"Hello &amp; welcome, &lt;b&gt;\"reader\"!&lt;/b&gt;"</span>;</span><br></pre></td></tr></table></figure></p>
<p>结果如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"content"</span>&gt;Hello &amp;amp; welcome, <span class="xml"><span class="tag">&lt;<span class="title">b</span>&gt;</span>&amp;quot;reader&amp;quot;!<span class="tag">&lt;/<span class="title">b</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>并不是所有元素都支持 innerHTML 属性。不支持 innerHTML 的元素有:col、colgroup、 frameset、head、html、style、table、tbody、thead、tfoot和tr。此 外,在 IE8 及更早版本中,title元素也没有 innerHTML 属性。</p>
<ul>
<li><p><strong>outerHTML 属性</strong><br>&emsp;&emsp;读模式下,outerHTML 返回调用它的元素及所有子节点的 HTML 标签。在写模式下,outerHTML 会根据指定的 HTML 字符串创建新的 DOM 子树,然后用这个 DOM 子树完全替换调用元素。</p>
</li>
<li><p><strong>内存与性能问题</strong><br>&emsp;&emsp;使用本节介绍的方法替换子节点可能会导致浏览器的内存占用问题,尤其是在 IE 中,问题更加明显。删除带有事件处理程序或引用了其他 JavaScript 对象子树时,就有可能导致内存占用问题。假设某个元素有一个事件处理程序(或者引用了一个 JavaScript 对象作为属性),在使用前述某个属性将该元素从文档树中删除后,元素与事件处理程序(或 JavaScript 对象)之间的绑定关系在内存中并没有一并删除。如果这种情况频繁出现,页面占用的内存数量就会明显增加。因此,在使用 innerHTML、 outerHTML 属性和 insertAdjacentHTML()方法时,最好先手工删除要被替换的元素的所有事件处理程序和 JavaScript 对象属性。</p>
</li>
</ul>
<p>&emsp;&emsp;每次循环都设置一次 innerHTML 的做法效率很低，最好的做法是单独构建字符串,然后再一次 性地将结果字符串赋值给 innerHTML。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, len=values.length; i &lt; len; i++)&#123;</span><br><span class="line">  itemsHtml += <span class="string">"&lt;li&gt;"</span> + values[i] + <span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">  ul.innerHTML = itemsHtml;</span><br></pre></td></tr></table></figure></p>
<h3 id="6-3__u4E13_u6709_u6269_u5C55"><a href="#6-3__u4E13_u6709_u6269_u5C55" class="headerlink" title="6.3 专有扩展"></a>6.3 专有扩展</h3><h4 id="1-children_u5C5E_u6027"><a href="#1-children_u5C5E_u6027" class="headerlink" title="1.children属性"></a>1.children属性</h4><p>&emsp;&emsp;由于 IE9 之前的版本与其他浏览器在处理文本节点中的空白符时有差异,因此就出现了 children 属性。这个属性是 HTMLCollection 的实例,只包含元素中同样还是元素的子节点，IE8 及更早版本的 children 属性中也会包含注释节点,但 IE9 之后的版本则只返回元素节点。<br>children在IE8会同时返回元素和注释节点。兼容children写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementChildren</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 除了IE8游览器</span></span><br><span class="line">  <span class="keyword">if</span> (element.children &amp;&amp; isIE () != <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> element.children;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> children = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len = element.childNodes.length;i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (element.childNodes[i].nodeType == <span class="number">1</span>) &#123;</span><br><span class="line">        children.push(element.childNodes[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> children;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断IE游览器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIE</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myNav = navigator.userAgent.toLowerCase();</span><br><span class="line">  <span class="keyword">return</span> (myNav.indexOf(<span class="string">'msie'</span>) != -<span class="number">1</span>) ? <span class="built_in">parseInt</span>(myNav.split(<span class="string">'msie'</span>)[<span class="number">1</span>]) : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="2-contains_28_29_u65B9_u6CD5"><a href="#2-contains_28_29_u65B9_u6CD5" class="headerlink" title="2.contains()方法"></a>2.contains()方法</h4><p>&emsp;&emsp;在实际开发中,经常需要知道某个节点是不是另一个节点的后代。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">document</span>.documentElement.contains(<span class="built_in">document</span>.body)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<h4 id="3-_u63D2_u5165_u6587_u672C"><a href="#3-_u63D2_u5165_u6587_u672C" class="headerlink" title="3.插入文本"></a>3.插入文本</h4><ul>
<li>innerText 属性</li>
</ul>
<p>&emsp;&emsp;通过 innertText 属性可以操作元素中包含的所有文本内容,包括子文档树中的文本。innerText 读取值时,它会按照由浅入深的顺序,将子文档树中的所有文本拼接起来。在通过 innerText 写入值时,结果会删除元素的所有子节点,插入包含相应文本值的文本节点。</p>
<p>&emsp;&emsp;支持 innerText 属性的浏览器包括 IE4+、Safari 3+、Opera 8+和 Chrome。Firefox45+。</p>
<p>&emsp;&emsp;textContent 是 DOM Level 3 规定的一个属性,其 他支持 textContent 属性的浏览器还有 IE9+、Safari 3+、Opera 10+、Chrome、Firefox。为了确保跨浏览器兼容，可以通过下面函数进行检测：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInnerText</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">typeof</span> element.innerText == <span class="string">"string"</span>) ? element.innerText : element.textContent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setInnerText</span>(<span class="params">element, text</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> element.innerText == <span class="string">"string"</span>)&#123;</span><br><span class="line">    element.innerText = text;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    element.textContent = text;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>outerText 属性</li>
</ul>
<p>&emsp;&emsp;除了作用范围扩大到了包含调用它的节点之外,outerText 与 innerText 基本上没有多大区别。 在读取文本值时,outerText 与 innerText 的结果完全一样。但在写模式下,outerText 就完全不 同了:outerText 不只是替换调用它的元素的子节点,而是会替换整个元素(包括子节点)。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;DOM(文档对象模型)是针对 HTML 和 XML 文档的一个 API(应用程序编程接口)。DOM 描 绘了一个层次化的节点树,允许开发人员添加、移除和修改页面的某一部分。</p>
<h2 id="6-1__u8282_u70B9_u5C42_u6B]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/05/13/%E7%AC%AC5%E7%AB%A0%20%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/05/13/第5章 函数表达式/</id>
    <published>2016-05-13T10:25:52.000Z</published>
    <updated>2016-05-07T02:56:34.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u7B2C5_u7AE0__u51FD_u6570_u8868_u8FBE_u5F0F"><a href="#u7B2C5_u7AE0__u51FD_u6570_u8868_u8FBE_u5F0F" class="headerlink" title="第5章 函数表达式"></a>第5章 函数表达式</h1><h2 id="5-1__u95ED_u5305"><a href="#5-1__u95ED_u5305" class="headerlink" title="5.1 闭包"></a>5.1 闭包</h2><p><strong>闭包：</strong> 是指有权访问另一个函数作用域中的自由变量的函数。创建闭包的常见方式,就是在一个函数内部创建另一个函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">createComparisonFunction</span>(<span class="params">propertyName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">object1, object2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value1 = object1[propertyName];</span><br><span class="line">    <span class="keyword">var</span> value2 = object2[propertyName];</span><br><span class="line">    <span class="keyword">if</span> (value1 &lt; value2)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;当某个函数被调用时,会创建一个执行环境(execution context)及相应的作用域链。然后,使用 arguments和其他命名参数的值来初始化函数的活动对象(activation object)。</p>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第5章 函数表达式/1.png" width="500"><br></div>

<p>&emsp;&emsp;作用域链的这种配置机制引出了一个值得注意的副作用,即闭包只能取得包含函数中任何变量的最 后一个值。别忘了闭包所保存的是整个变量对象,而不是某个特殊的变量。下面这个例子可以清晰地说明这个问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;   </span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;因为每个函数的作用域链中都保存着 createFunctions()函数的活动对象,所以它们引用的都是同一个变量 i。当 createFunctions()函数返回后,变量 i 的值是 10,此时每个函数都引用着保存变量 i 的同一个变量 对象,所以在每个函数内部 i 的值都是 10。可以通过创建一个匿名函数强制让闭包的行为符合预期：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    result[i] = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;(i);  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="5-2__u5185_u5B58_u6CC4_u6F0F"><a href="#5-2__u5185_u5B58_u6CC4_u6F0F" class="headerlink" title="5.2 内存泄漏"></a>5.2 内存泄漏</h2><p>&emsp;&emsp;由于 IE9 之前的版本对 JScript 对象和 COM 对象使用不同的垃圾收集例程,因此闭包在 IE 的这些版本中会导致一些特殊的问题。具体来说,如果闭包的作用域链中保存着一个HTML 元素,那么就意味着该元素将无法被销毁。只要匿名函数存在,element 的引用数至少也是1,因此它所 占用的内存就永远不会被回收。有必要把 element 变量设置为 null。这样就能够解除对 DOM 对象的引 用,顺利地减少其引用数,确保正常回收其占用的内存。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignHandler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"someElement"</span>);</span><br><span class="line">  element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(element.id);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignHandler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"someElement"</span>);</span><br><span class="line">  <span class="keyword">var</span> id = element.id;</span><br><span class="line">  element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(id);</span><br><span class="line">  &#125;;</span><br><span class="line">  element = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u7B2C5_u7AE0__u51FD_u6570_u8868_u8FBE_u5F0F"><a href="#u7B2C5_u7AE0__u51FD_u6570_u8868_u8FBE_u5F0F" class="headerlink" title="第5章 函数]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[第4章 面向对象的程序设计]]></title>
    <link href="http://yoursite.com/2016/05/13/%E7%AC%AC4%E7%AB%A0%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2016/05/13/第4章 面向对象的程序设计/</id>
    <published>2016-05-13T10:25:52.000Z</published>
    <updated>2016-05-06T07:58:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u7B2C4_u7AE0__u9762_u5411_u5BF9_u8C61_u7684_u7A0B_u5E8F_u8BBE_u8BA1"><a href="#u7B2C4_u7AE0__u9762_u5411_u5BF9_u8C61_u7684_u7A0B_u5E8F_u8BBE_u8BA1" class="headerlink" title="第4章 面向对象的程序设计"></a>第4章 面向对象的程序设计</h1><h2 id="4-1__u7406_u89E3_u5BF9_u8C61"><a href="#4-1__u7406_u89E3_u5BF9_u8C61" class="headerlink" title="4.1 理解对象"></a>4.1 理解对象</h2><p>&emsp;&emsp;ECMAScript中有两种属性:数据属性和访问器属性：</p>
<ol>
<li>数据属性</li>
</ol>
<p>&emsp;&emsp;数据属性包含一个数据值的位置。在这个位置可以读取和写入值。数据属性有4个描述其行为的特性。</p>
<ul>
<li>[[Configurable]]:表示能否通过 delete 删除属性从而重新定义属性,能否修改属性的特性,或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性,它们的<br>这个特性默认值为 true。</li>
<li>[[Enumerable]]:表示能否通过 for-in 循环返回属性。像前面例子中那样直接在对象上定义的属性,它们的这个特性默认值为 true。</li>
<li>[[Writable]]:表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性,它们的这个特性默认值为 true。</li>
<li>[[Value]]:包含这个属性的数据值。读取属性值的时候,从这个位置读;写入属性值的时候,把新值保存在这个位置。这个特性的默认值为 undefined。</li>
</ul>
<p>&emsp;&emsp;对于像前面例子中那样直接在对象上定义的属性,它们的[[Configurable]]、[[Enumerable]]<br>和[[Writable]]特性都被设置为 true,而[[Value]]特性被设置为指定的值。</p>
<ol>
<li>访问器属性</li>
</ol>
<ul>
<li>[[Configurable]]:表示能否通过 delete 删除属性从而重新定义属性,能否修改属性的特 性,或者能否把属性修改为数据属性。对于直接在对象上定义的属性,这个特性的默认值为 true。</li>
<li>[[Enumerable]]:表示能否通过 for-in 循环返回属性。对于直接在对象上定义的属性,这 5 个特性的默认值为 true。</li>
<li>[[Get]]:在读取属性时调用的函数。默认值为 undefined。</li>
<li>[[Set]]:在写入属性时调用的函数。默认值为 undefined。</li>
</ul>
<h2 id="4-2__u521B_u5EFA_u5BF9_u8C61"><a href="#4-2__u521B_u5EFA_u5BF9_u8C61" class="headerlink" title="4.2 创建对象"></a>4.2 创建对象</h2><p>&emsp;&emsp;工厂模式是软件工程领域一种广为人知的设计模式,这种模式抽象了创建具体对象的过程。开发人员就发明了一种函数,用函数来封装以特定接口创建对象的细节。函数 createPerson()能够根据接受的参数来构建一个包含所有必要信息的 Person 对象。可以无数次地调用这个函数,而每次它都会返回一个包含三个属性一个方法的对象。工厂模式虽然解决了创建多个相似对象的问题,但却没有解决对象识别的问题(即怎样知道一个对象的类型)。</p>
<h3 id="4-2-1__u5DE5_u5382_u6A21_u5F0F"><a href="#4-2-1__u5DE5_u5382_u6A21_u5F0F" class="headerlink" title="4.2.1 工厂模式"></a>4.2.1 工厂模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.name = name;</span><br><span class="line">  o.age = age;</span><br><span class="line">  o.job = job;</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="4-2-2__u6784_u9020_u51FD_u6570_u6A21_u5F0F"><a href="#4-2-2__u6784_u9020_u51FD_u6570_u6A21_u5F0F" class="headerlink" title="4.2.2 构造函数模式"></a>4.2.2 构造函数模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;Person()中的代码与 createPerson()不同之处:</p>
<ul>
<li>没有显式地创建对象;</li>
<li>直接将属性和方法赋给了 this 对象;</li>
<li>没有 return 语句。</li>
</ul>
<p>&emsp;&emsp;要创建 Person 的新实例,必须使用 new 操作符。以这种方式调用构造函数实际上会经历以下4个步骤:<br>(1) 创建一个新对象;<br>(2) 将构造函数的作用域赋给新对象(因此 this 就指向了这个新对象);<br>(3) 执行构造函数中的代码(为这个新对象添加属性);<br>(4) 返回新对象。</p>
<p>&emsp;&emsp;创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型;而这正是构造函数模式胜过工厂模式的地方。</p>
<p><strong>构造函数的问题:</strong> 每个方法都要在每个实例上重新创建一遍。</p>
<h3 id="4-2-3__u539F_u578B_u6A21_u5F0F"><a href="#4-2-3__u539F_u578B_u6A21_u5F0F" class="headerlink" title="4.2.3 原型模式"></a>4.2.3 原型模式</h3><p>&emsp;&emsp;创建的每个函数都有一个 prototype(原型)属性,这个属性是一个指针,指向一个对象, 而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。那么 prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说,不必在构造函数中定义对象实例的信息,可以将这些信息直接添加到原型对象中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName();   <span class="comment">//"Nicholas"</span></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person2.sayName(); <span class="comment">//"Nicholas"</span></span><br><span class="line">alert(person1.sayName == person2.sayName);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<ol>
<li>理解原型对象</li>
</ol>
<p>&emsp;&emsp;1. 理解原型对象<br>无论什么时候,只要创建了一个新函数,就会根据一组特定的规则为该函数创建一个 prototype 属性,这个属性指向函数的原型对象。在默认情况下,所有原型对象都会自动获得一个 constructor (构造函数)属性,这个属性包含一个指向 prototype 属性所在函数的指针。就拿前面的例子来说, Person.prototype. constructor 指向 Person。</p>
<p>&emsp;&emsp;创建了自定义的构造函数之后,其原型对象默认只会取得 constructor 属性;至于其他方法,则<br>都是从 Object 继承而来的。当调用构造函数创建一个新实例后,该实例的内部将包含一个指针(内部 属性),指向构造函数的原型对象。ECMA-262 第 5 版中管这个指针叫[[Prototype]]。虽然在脚本中 没有标准的方式访问[[Prototype]],但 Firefox、Safari 和 Chrome 在每个对象上都支持一个属性 <strong>proto</strong>;而在其他实现中,这个属性对脚本则是完全不可见的。不过,要明确的真正重要的一点就是,这个连接存在于实例与构造函数的原型对象之间,而不是存在于实例与构造函数之间。</p>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第4章 面向对象/1.png" width="400"><br></div>

<p>&emsp;&emsp;虽然在所有实现中都无法访问到[[Prototype]],但可以通过 isPrototypeOf()方法来确定对象之间是否存在这种关系。从本质上讲,如果[[Prototype]]指向调用 isPrototypeOf()方法的对象(Person.prototype),那么这个方法就返回true。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(Person.prototype.isPrototypeOf(person1));  <span class="comment">//true</span></span><br><span class="line">alert(Person.prototype.isPrototypeOf(person2));  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Object.getPrototypeOf():</strong> ES5新增方法，这个方法返回[[Prototype]]的值，可以方便地取得一个对象的原型。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">Object</span>.getPrototypeOf(person1) == Person.prototype); <span class="comment">//true</span></span><br><span class="line">alert(<span class="built_in">Object</span>.getPrototypeOf(person1).name); <span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;当为对象实例添加一个属性时,这个属性就会屏蔽原型对象中保存的同名属性;换句话说,添加这个属性只会阻止我们访问原型中的那个属性,但不会修改那个属性。即使将这个属性设置为 null,也 只会在实例中设置这个属性,而不会恢复其指向原型的连接。不过,使用 delete 操作符则可以完全删除实例属性,从而让我们能够重新访问原型中的属性。</p>
<p><strong>hasOwnProperty()：</strong> 检测一个属性是存在于实例中,还是存在于原型中。给定属性存在于对象实例中时,才会返回 true。</p>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第4章 面向对象/2.png" width="400"><br></div>

<ol>
<li>原型与in操作符</li>
</ol>
<p><strong>in 操作符：</strong> 通过对象能够访问给定属性时返回 true,无论该属性存在于实例中还是原型中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>));  <span class="comment">//false</span></span><br><span class="line">alert(<span class="string">"name"</span> <span class="keyword">in</span> person1);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;在使用 for-in 循环时,返回的是所有能够通过对象访问的、可枚举的(enumerated)属性,其中既包括存在于实例中的属性,也包括存在于原型中的属性。屏蔽了原型中不可枚举属性(即将 [[Enumerable]]标记为 false 的属性)的实例属性也会在 for-in 循环中返回,因为根据规定,所有开发人员定义的属性都是可枚举的——只有在 IE8 及更早版本中例外。</p>
<p><strong>Object.keys()：</strong> ES5方法，取得对象上所有可枚举的实例属性，接收一个对象作为参数,返回一个包含所有可枚举属性的字符串数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Nicholas"</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(Person.prototype);</span><br><span class="line">alert(keys);       <span class="comment">//"name,age,job,sayName"</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.name = <span class="string">"Rob"</span>;</span><br><span class="line">p1.age = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">var</span> p1keys = <span class="built_in">Object</span>.keys(p1);</span><br><span class="line">alert(p1keys);    <span class="comment">//"name,age"</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Object.getOwnPropertyNames()：</strong> 得到所有实例属性,无论它是否可枚举。结果中包含了不可枚举的 constructor 属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> keys = <span class="built_in">Object</span>.getOwnPropertyNames(Person.prototype);</span><br><span class="line">alert(keys);    <span class="comment">//"constructor,name,age,job,sayName"</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li>更简单的原型语法</li>
</ol>
<p>&emsp;&emsp;为减少不必要的输入,也为了从视觉上更好地封装原型的功能,更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name : <span class="string">"Nicholas"</span>,</span><br><span class="line">  age : <span class="number">29</span>,</span><br><span class="line">  job: <span class="string">"Software Engineer"</span>,</span><br><span class="line">  sayName : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;<strong>注意：</strong> 在上面的代码中,我们将 Person.prototype 设置为等于一个以对象字面量形式创建的新对象，constructor 属性不再指向 Person 了。前面曾经介绍过,每创建一个函数,就会同时创建它的 prototype 对象,这个对象也会自动获得 constructor 属性。而我们在 这里使用的语法,本质上完全重写了默认的 prototype 对象,因此 constructor 属性也就变成了新 对象的 constructor 属性(指向 Object 构造函数),不再指向 Person 函数。此时,尽管 instanceof 操作符还能返回正确的结果,但通过 constructor 已经无法确定对象的类型了。可像下面这样特意将它设置回适当的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person();</span><br><span class="line">alert(friend <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">//true</span></span><br><span class="line">alert(friend <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">alert(friend.constructor == Person);<span class="comment">//false</span></span><br><span class="line">alert(friend.constructor == <span class="built_in">Object</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  constructor : Person,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;以这种方式重设 constructor 属性会导致它的[[Enumerable]]特性被设置为 true。默认 情况下,原生的 constructor 属性是不可枚举的,可通过<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重设构造函数,只适用于 ECMAScript 5 兼容的浏览器</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person.prototype, <span class="string">"constructor"</span>, &#123;</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  value: Person</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor: Person,</span><br><span class="line">    name : <span class="string">"Nicholas"</span>,</span><br><span class="line">    age : <span class="number">29</span>,</span><br><span class="line">    job : <span class="string">"Software Engineer"</span>,</span><br><span class="line">    sayName : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">friend.sayName();   <span class="comment">//error</span></span><br><span class="line"><span class="string">``</span><span class="string">`    </span><br><span class="line"></span><br><span class="line">4. 原型动态性</span><br><span class="line"></span><br><span class="line">&amp;emsp;&amp;emsp;在这个例子中,我们先创建了 Person 的一个实例,然后又重写了其原型对象。然后在调用 friend.sayName()时发生了错误,因为 friend 指向的原型中不包含以该名字命名的属性。</span><br><span class="line"></span><br><span class="line">&lt;div style="text-align:center;margin-bottom:20px;"&gt;</span><br><span class="line">  &lt;img src="../images/JavaScript高级程序设计/第4章 面向对象/3.png" width="400"&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">5. 问题</span><br><span class="line"></span><br><span class="line">&amp;emsp;&amp;emsp;原型模式的最大问题是共享，原型中所有属性是被很多实例共享的。</span><br><span class="line"></span><br><span class="line">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor: Person,</span><br><span class="line">    friends : [<span class="string">"Shelby"</span>, <span class="string">"Court"</span>],</span><br><span class="line">    sayName : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.friends.push(<span class="string">"Van"</span>);</span><br><span class="line">alert(person1.friends);    <span class="comment">//"Shelby,Court,Van"</span></span><br><span class="line">alert(person2.friends);    <span class="comment">//"Shelby,Court,Van"</span></span><br><span class="line">alert(person1.friends === person2.friends);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-2-4__u7EC4_u5408_u4F7F_u7528_u6784_u9020_u51FD_u6570_u6A21_u5F0F_u548C_u539F_u578B_u6A21_u5F0F"><a href="#4-2-4__u7EC4_u5408_u4F7F_u7528_u6784_u9020_u51FD_u6570_u6A21_u5F0F_u548C_u539F_u578B_u6A21_u5F0F" class="headerlink" title="4.2.4 组合使用构造函数模式和原型模式"></a>4.2.4 组合使用构造函数模式和原型模式</h3><p>&emsp;&emsp;创建自定义类型的最常见方式,就是组合使用构造函数模式与原型模式。构造函数模式用于定义实例属性,而原型模式用于定义方法和共享的属性。结果,每个实例都会有自己的一份实例属性的副本,但同时又共享着对方法的引用,最大限度地节省了内存。另外,这种混成模式还支持向构造函数传递参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">  <span class="keyword">this</span>.friends = [<span class="string">"Shelby"</span>, <span class="string">"Court"</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor : Person,</span><br><span class="line">    sayName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</span><br><span class="line"></span><br><span class="line">person1.friends.push(<span class="string">"Van"</span>);</span><br><span class="line">alert(person1.friends);<span class="comment">//"Shelby,Count,Van"  </span></span><br><span class="line">alert(person2.friends); <span class="comment">//"Shelby,Count"</span></span><br><span class="line">alert(person1.friends === person2.friends);<span class="comment">//false</span></span><br><span class="line">alert(person1.sayName === person2.sayName);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<h2 id="4-3__u7EE7_u627F"><a href="#4-3__u7EE7_u627F" class="headerlink" title="4.3 继承"></a>4.3 继承</h2><h3 id="4-3-1__u539F_u578B_u94FE"><a href="#4-3-1__u539F_u578B_u94FE" class="headerlink" title="4.3.1 原型链"></a>4.3.1 原型链</h3><p>&emsp;&emsp;ECMAScript只支持实现继承,其实现继承主要是依靠原型链来实现的。</p>
<p>&emsp;&emsp;<strong>原型链</strong> 基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。回顾一下构造函数、原型和实例的关系:每个构造函数都有一个原型对象,原型对象都包含一个指向构造函数的指针,而实例都包含一个指向原型对象的内部指针。那么,假如 <strong>我们让原型对象等于另一个类型的实例</strong>,此时的原型对象将包含一个指向另一个原型的指针,相应地,另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例,那么上述关系依然成立,如此层层递进,就构成了实例与原型的链条。这就是所谓原型链的基本概念。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.property;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承了 SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line">alert(instance.getSuperValue());<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp; SubType 继承了 SuperType,而继承是通过创建 SuperType 的实例,并将该实例赋给 SubType.prototype实现的。实现的本质是重写原型对象,代之以一个新类型的实例。getSuperValue()方法仍然还在 SuperType.prototype 中,但 property 则位于 SubType.prototype 中。这是因为 property 是一个实例属性,而 getSuperValue()则是一个原型方法。此外,要注意 instance.constructor 现在指向的是SuperType,这是因为原来 SubType.prototype 被重写了的缘故,就如同上例一样，SubType.prototype没有了constructor属性，当访问该属性时，实际上是访问了SuperType.prototype.constructor，所以指向了SuperType。</p>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第4章 面向对象/4.png" width="400"><br></div>

<p>&emsp;&emsp;还有一点需要提醒,即在通过原型链实现继承时,不能使用对象字面量创建原型方法。因为这样做就会重写原型链。现在SubType的原型包含的是一个 Object 的实例,而非 SuperType 的实例,因此我们设想中的原型链已经被切断——SubType 和 SuperType 之间已经没有关系了。如果下面代码中1.2步骤调换，则原型链没有关系，只是SubType.prototype上定义的两个方法都不存在了，原因是SubType.prototype被重写。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.property;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.继承了 SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="comment">//2.使用字面量添加新方法,会导致上一行代码无效</span></span><br><span class="line">SubType.prototype = &#123;</span><br><span class="line">  getSubValue : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</span><br><span class="line">&#125;,</span><br><span class="line">  someOtherMethod : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; &#125;;</span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line">alert(instance.getSuperValue());   <span class="comment">//error!</span></span><br></pre></td></tr></table></figure></p>
<p><strong>问题：</strong> 最主要的问题来自包含引用类型值的原型我们前面介绍过包含引用类型值的原型属性会被所有实例共享;而 这也正是为什么要在构造函数中,而不是在原型对象中定义属性的原因。在通过原型来实现继承时,原型实际上会变成另一个类型的实例。于是,原先的实例属性也就顺理成章地变成了现在的原型属性了。第二个问题是:在创建子类型的实例时,不能向超类型的构造函数中传递参数。实际上,应该说是没有办法在不影响所有对象实例的情况下,给超类型的构造函数传递参数。有鉴于此,再加上前面刚刚讨论过的由于原型中包含引用类型值所带来的问题,实践中很少会单独使用原型链。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承了 SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>);</span><br><span class="line">alert(instance1.colors); <span class="comment">//"red,blue,green,black"</span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line">alert(instance2.colors); <span class="comment">//"red,blue,green,black"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-3-2__u501F_u7528_u6784_u9020_u51FD_u6570"><a href="#4-3-2__u501F_u7528_u6784_u9020_u51FD_u6570" class="headerlink" title="4.3.2 借用构造函数"></a>4.3.2 借用构造函数</h3><p><strong>借用构造函数：</strong> 在子类型构造函数的内部调用超类型构造函数。函数只不过是在特定环境中执行代码的对象, 因此通过使用 apply()和 call()方法也可以在(将来)新创建的对象上执行构造函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//继承了 SuperType</span></span><br><span class="line">  SuperType.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>);</span><br><span class="line">alert(instance1.colors);<span class="comment">//"red,blue,green,black"    </span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line">alert(instance2.colors);<span class="comment">//"red,blue,green"</span></span><br></pre></td></tr></table></figure></p>
<p><strong>问题:</strong> 方法都在构造函数中定义,因此函数复用就无从谈起了。而且,在超类型的原型中定义的方法,对子类型而言也是不可见的,结果所有类型都只能使用构造函数模式。</p>
<h3 id="4-3-3__u7EC4_u5408_u7EE7_u627F"><a href="#4-3-3__u7EC4_u5408_u7EE7_u627F" class="headerlink" title="4.3.3 组合继承"></a>4.3.3 组合继承</h3><p>&emsp;&emsp;将原型链和借用构造函数的技术组合到一块,从而发挥二者之长的一种继承模式。其背后的思路是使用原型链实现对原型属性和方法的继承,而通过借用构造函数来实现对实例属性的继承。这样,既通过在原型上定义方法实现了函数复用,又能够保证每个实例都有它自己的属性,是 JavaScript 中最常用的继承模式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line"><span class="comment">//继承属性</span></span><br><span class="line">SuperType.call(<span class="keyword">this</span>, name);</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承方法</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType(); SubType.prototype.constructor = SubType; SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"Nicholas"</span>, <span class="number">29</span>);</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>);</span><br><span class="line">alert(instance1.colors);<span class="comment">//"red,blue,green,black"</span></span><br><span class="line">instance1.sayName();<span class="comment">//"Nicholas";</span></span><br><span class="line">instance1.sayAge();<span class="comment">//29</span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">"Greg"</span>, <span class="number">27</span>);</span><br><span class="line">alert(instance2.colors);<span class="comment">//"red,blue,green"</span></span><br><span class="line">instance2.sayName();<span class="comment">//"Greg";</span></span><br><span class="line">instance2.sayAge();<span class="comment">//27</span></span><br></pre></td></tr></table></figure></p>
<p><strong>不足：</strong> 组合继承最大的问题就是无论什么情况下,都会调用两次超类型构造函数:一次是在创建子类型原型的时候,另一次是在子类型构造函数内部。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">  SuperType.call(<span class="keyword">this</span>, name);<span class="comment">//第二次调用SuperType()</span></span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();<span class="comment">//第一次调用SuperType()</span></span><br><span class="line">SubType.prototype.constructor = SubType;</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;在第一次调用 SuperType 构造函数时, SubType.prototype 会得到两个属性:name 和 colors;它们都是 SuperType 的实例属性,只不过 现在位于 SubType 的原型中。当调用 SubType 构造函数时,又会调用一次 SuperType 构造函数,这 一次又在新对象上创建了实例属性 name 和 colors。于是,这两个属性就屏蔽了原型中的两个同名属性。有两组 name 和 colors 属性:一组在实例上,一组在 SubType 原型中。这就是调 用两次 SuperType 构造函数的结果。解决这个问题方法——寄生组合式继承。</p>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第4章 面向对象/5.png" width="400"><br></div>

<h3 id="4-3-4__u539F_u578B_u5F0F_u7EE7_u627F"><a href="#4-3-4__u539F_u578B_u5F0F_u7EE7_u627F" class="headerlink" title="4.3.4 原型式继承"></a>4.3.4 原型式继承</h3><p><strong>Object.create()：</strong> 接收两个参数:一个用作新对象原型的对象和(可选的)一个为新对象定义额外属性的对象。在传入一个参数的情况下, Object.create()与 object()方法的行为相同。在没有必要兴师动众地创建构造函数,而只想让一个对象与另一个对象保持类似的情况下,原型式 继承是完全可以胜任的。不过包含引用类型值的属性始终都会共享相应的值,就像使用原型模式一样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"Nicholas"</span>,</span><br><span class="line">    friends: [<span class="string">"Shelby"</span>, <span class="string">"Court"</span>, <span class="string">"Van"</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> anotherPerson = <span class="built_in">Object</span>.create(person);</span><br><span class="line">anotherPerson.name = <span class="string">"Greg"</span>;</span><br><span class="line">anotherPerson.friends.push(<span class="string">"Rob"</span>);</span><br><span class="line"><span class="keyword">var</span> yetAnotherPerson = <span class="built_in">Object</span>.create(person);</span><br><span class="line">yetAnotherPerson.name = <span class="string">"Linda"</span>;</span><br><span class="line">yetAnotherPerson.friends.push(<span class="string">"Barbie"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.friends);<span class="comment">//"Shelby,Court,Van,Rob,Barbie"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟Object.create()方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="4-3-5__u5BC4_u751F_u7EC4_u5408_u5F0F_u7EE7_u627F"><a href="#4-3-5__u5BC4_u751F_u7EC4_u5408_u5F0F_u7EE7_u627F" class="headerlink" title="4.3.5 寄生组合式继承"></a>4.3.5 寄生组合式继承</h3><p>&emsp;&emsp;所谓寄生组合式继承,即通过借用构造函数来继承属性,通过原型链的混成形式来继承方法。其背后的基本思路是:不必为了指定子类型的原型而调用超类型的构造函数,我们所需要的无非就是超类型原型的一个副本而已。本质上,就是使用寄生式继承来继承超类型的原型,然后再将结果指定给子类型的原型。</p>
<p>&emsp;&emsp;这个示例中的 inheritPrototype()函数实现了寄生组合式继承的最简单形式。这个函数接收两个参数:子类型构造函数和超类型构造函数。在函数内部,第一步是创建超类型原型的一个副本。第二步是为创建的副本添加 constructor 属性,从而弥补因重写原型而失去的默认的 constructor 属性。最后一步,将新创建的对象(即副本)赋值给子类型的原型。这样,我们就可以用调用 inherit- Prototype()函数的语句,去替换前面例子中为子类型原型赋值的语句了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>)</span>&#123;</span><br><span class="line">  subType.prototype = object(superType.prototype);</span><br><span class="line">  subType.prototype.constructor = subType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    SuperType.call(<span class="keyword">this</span>, name);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(SubType, SuperType);</span><br><span class="line"><span class="comment">// 可通过下面语句替换inheritPrototype和object函数的功能</span></span><br><span class="line"><span class="comment">// SubType.prototype = Object.create(SuperType.prototype);</span></span><br><span class="line"><span class="comment">// SubType.prototype.constructor = SubType;</span></span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;这个例子的高效率体现在它只调用了一次 SuperType 构造函数,并且因此避免了在 SubType. prototype 上面创建不必要的、多余的属性。与此同时,原型链还能保持不变;因此,还能够正常使用 instanceof 和 isPrototypeOf()。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u7B2C4_u7AE0__u9762_u5411_u5BF9_u8C61_u7684_u7A0B_u5E8F_u8BBE_u8BA1"><a href="#u7B2C4_u7AE0__u9762_u5411_u5BF9_u8C61_u7684_u7A0B_u5E]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[第1章 JavaScript基本语法]]></title>
    <link href="http://yoursite.com/2016/05/13/%E7%AC%AC1%E7%AB%A0%20JavaScript%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2016/05/13/第1章 JavaScript基本概念/</id>
    <published>2016-05-13T10:25:52.000Z</published>
    <updated>2016-05-04T16:52:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-1__u6807_u8BC6_u7B26"><a href="#1-1__u6807_u8BC6_u7B26" class="headerlink" title="1.1 标识符"></a>1.1 标识符</h2><p>&emsp;&emsp;所谓标识符,就是指变量、函数、属性的名字,或者函数的参数。标识符可以是按照下列格式规则 组合起来的一或多个字符:</p>
<ul>
<li>第一个字符必须是一个字母、下划线或一个美元符号($);</li>
<li>其他字符可以是字母、下划线、美元符号或数字。</li>
</ul>
<h2 id="1-2__u6570_u636E_u7C7B_u578B"><a href="#1-2__u6570_u636E_u7C7B_u578B" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h2><p>&emsp;&emsp;ECMAScript中有5种简单数据类型(也称为基本数据类型):Undefined、Null、Boolean、Number 和 String。还有 1 种复杂数据类型——Object,Object 本质上是由一组无序的名值对组成的。</p>
<h3 id="1-2-1_typeof_u64CD_u4F5C_u7B26"><a href="#1-2-1_typeof_u64CD_u4F5C_u7B26" class="headerlink" title="1.2.1 typeof操作符"></a>1.2.1 typeof操作符</h3><p>&emsp;&emsp;鉴于 ECMAScript 是松散类型的,因此需要有一种手段来检测给定变量的数据类型——typeof 就 是负责提供这方面信息的操作符。对一个值使用 typeof 操作符可能返回下列某个字符串:</p>
<ul>
<li>“undefined”——如果这个值未定义;</li>
<li>“boolean”——如果这个值是布尔值;</li>
<li>“string”——如果这个值是字符串;</li>
<li>“number”——如果这个值是数值;</li>
<li>“object”——如果这个值是对象或 null;</li>
<li>“function”——如果这个值是函数。</li>
</ul>
<p>&emsp;&emsp;有些时候,typeof操作符会返回一些令人迷惑但技术上却正确的值。比如,调用typeof null会返回”object”,因为特殊值null 被认为是一个空的对象引用。Safari 5及之前版本、Chrome 7及之前版本在对正则表达式调用typeof操作符时会返回”function”,而其他浏览器在这种情况下会返回 “object”。</p>
<h3 id="1-2-2_Undefined_u7C7B_u578B"><a href="#1-2-2_Undefined_u7C7B_u578B" class="headerlink" title="1.2.2 Undefined类型"></a>1.2.2 Undefined类型</h3><p>&emsp;&emsp;Undefined 类型只有一个值,即特殊的 undefined。在使用 var 声明变量但未对其加以初始化时,这个变量的值就是 undefined<br>&emsp;&emsp;值得注意的是:对未初始化的变量执行typeof操作符会返回undefined 值,而对未声明的变量执行typeof 操作符同样也会返回undefined值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message;  <span class="comment">// 这个变量声明之后默认取得了 undefined 值</span></span><br><span class="line">alert(<span class="keyword">typeof</span> message);  <span class="comment">// "undefined"</span></span><br><span class="line">alert(<span class="keyword">typeof</span> age);      <span class="comment">// "undefined"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="1-2-3_Null_u7C7B_u578B"><a href="#1-2-3_Null_u7C7B_u578B" class="headerlink" title="1.2.3 Null类型"></a>1.2.3 Null类型</h3><p>&emsp;&emsp;Null类型是第二个只有一个值的数据类型,这个特殊的值是 null。从逻辑角度来看,null 值表 示一个空对象指针,而这也正是使用 typeof 操作符检测 null 值时会返回”object”的原因，如果定义的变量准备在将来用于保存对象,那么最好将该变量初始化为 null 而不是其他值。这样 一来,只要直接检查 null 值就可以知道相应的变量是否已经保存了一个对象的引用</p>
<h3 id="1-2-4_Boolean_u7C7B_u578B"><a href="#1-2-4_Boolean_u7C7B_u578B" class="headerlink" title="1.2.4 Boolean类型"></a>1.2.4 Boolean类型</h3><p>&emsp;&emsp;下表给出了各种数据类型及其对 应的转换规则:</p>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">转换为true的值</th>
<th style="text-align:center">转换为false的值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">true</td>
<td style="text-align:center">false</td>
</tr>
<tr>
<td style="text-align:center">String</td>
<td style="text-align:center">任何非空字符串</td>
<td style="text-align:center">“”(空字符串)</td>
</tr>
<tr>
<td style="text-align:center">Number</td>
<td style="text-align:center">任何非零数字值(包括无穷大)</td>
<td style="text-align:center">0和NaN(参见本章后面有关NaN的内容)</td>
</tr>
<tr>
<td style="text-align:center">Object</td>
<td style="text-align:center">任何对象</td>
<td style="text-align:center">null</td>
</tr>
<tr>
<td style="text-align:center">Undefined</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">undefined</td>
</tr>
</tbody>
</table>
<h3 id="1-2-5_Number_u7C7B_u578B"><a href="#1-2-5_Number_u7C7B_u578B" class="headerlink" title="1.2.5 Number类型"></a>1.2.5 Number类型</h3><p>&emsp;&emsp;有3个函数可以把非数值转换为数值:Number()、parseInt()和 parseFloat()。第一个函数, 即转型函数 Number()可以用于任何数据类型,而另两个函数则专门用于把字符串转换成数值。这3个函数对于同样的输入会有返回不同的结果,Number()函数的转换规则如下:</p>
<blockquote>
<ul>
<li>如果是 Boolean 值,true 和 false 将分别被转换为 1 和 0。</li>
<li>如果是数字值,只是简单的传入和返回。</li>
<li>如果是 null 值,返回 0。</li>
<li>如果是 undefined,返回 NaN。</li>
<li>如果是字符串,遵循下列规则:</li>
<li>如果字符串中只包含数字(包括前面带正号或负号的情况),则将其转换为十进制数值,即”1” 会变成 1,”123”会变成 123,而”011”会变成 11(注意:前导的零被忽略了);</li>
<li>如果字符串中包含有效的浮点格式,如”1.1”,则将其转换为对应的浮点数值(同样,也会忽 略前导零);</li>
<li>如果字符串中包含有效的十六进制格式,例如”0xf”,则将其转换为相同大小的十进制整 数值;</li>
<li>如果字符串是空的(不包含任何字符),则将其转换为 0;</li>
<li>如果字符串中包含除上述格式之外的字符,则将其转换为 NaN。</li>
<li><strong>如果是对象,则调用对象的 valueOf()方法,然后依照前面的规则转换返回的值。如果转换<br>的结果是 NaN,则调用对象的 toString()方法,然后再次依照前面的规则转换返回的字符<br>串值。</strong></li>
</ul>
</blockquote>
<p>&emsp;&emsp;由于Number()函数在转换字符串时比较复杂而且不够合理,因此在处理整数的时候更常用的是parseInt()函数更多的是看其是否符合数值模式。它会忽略字符串前面的空格,直至找到第一个非空格字符。如果第一个字符不是数字字符或者负号,parseInt() 就会返回 NaN;也就是说,用 parseInt()转换空字符串会返回NaN(Number()对空字符返回0)。如果第一个字符是数字字符,parseInt()会继续解析第二个字符,直到解析完所有后续字符或者遇到了一个非数字字符。例如,”1234blue”会被转换为1234,因为”blue”会被完全忽略。类似地,”22.5”会被转换为22,因为小数点并不是有效的数字字符。</p>
<p>&emsp;&emsp;在使用parseInt()解析像八进制字面量的字符串时,ECMAScript 3 和 5 存在分歧。例如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ECMAScript 3 认为是 56(八进制),ECMAScript 5 认为是 70(十进制)</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="string">"070"</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;由于在ECMAScript 5 JavaScript引擎中,parseInt()已经不具有解析八进制值的能力,因此前导的零会 被认为无效。</p>
<p>&emsp;&emsp;为了消除在使用parseInt()函数时可能导致的上述困惑,可以为这个函数提供第二个参数:转换时使用的基数(即多少进制)。</p>
<ul>
<li>如果知道要解析的值是十六进制格式的字符串,那么指定基数16作为第二个参数,可以保证得到正确的结果。</li>
<li>不指定基数意味着让parseInt()决定如何解析输入的字符串,因此为了避免错误的解析,我们建议无论在什么情况下都明确指定基数。</li>
<li>多数情况下,我们要解析的都是十进制数值,因此始终将10作为第二个参数是 非常必要的。</li>
</ul>
<p>&emsp;&emsp;parseFloat()与parseInt()的区别是在parseFloat()中第一个小数点有效，并且parseFloat()始终都会忽略前导 的零,因此对十六进制格式的字符串则始终会被转换成0,并且果字符串包含的是一个可解析为整数的数(没有小数点,或者小数点后都是零),parseFloat()会返回整数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseFloat</span>(<span class="string">"1234blue"</span>);  <span class="comment">//1234 (整数)  </span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseFloat</span>(<span class="string">"0xA"</span>);       <span class="comment">//0  </span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseFloat</span>(<span class="string">"22.5"</span>);      <span class="comment">//22.5   </span></span><br><span class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseFloat</span>(<span class="string">"22.34.5"</span>);   <span class="comment">//22.34   </span></span><br><span class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseFloat</span>(<span class="string">"0908.5"</span>);    <span class="comment">//908.5   </span></span><br><span class="line"><span class="keyword">var</span> num6 = <span class="built_in">parseFloat</span>(<span class="string">"3.125e7"</span>);   <span class="comment">//31250000</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-6_String_u7C7B_u578B"><a href="#1-2-6_String_u7C7B_u578B" class="headerlink" title="1.2.6 String类型"></a>1.2.6 String类型</h3><p>&emsp;&emsp;String 类型用于表示由零或多个 16 位 Unicode 字符组成的字符序列,即字符串。</p>
<h4 id="u5B57_u7B26_u4E32_u7684_u7279_u70B9"><a href="#u5B57_u7B26_u4E32_u7684_u7279_u70B9" class="headerlink" title="字符串的特点"></a>字符串的特点</h4><p>&emsp;&emsp;ECMAScript中的字符串是不可变的,也就是说,字符串一旦创建,它们的值就不能改变。要改变某个变量保存的字符串,首先要销毁原来的字符串,然后再用另一个包含新值的字符串填充该变量。</p>
<h4 id="u8F6C_u6362_u4E3A_u5B57_u7B26_u4E32"><a href="#u8F6C_u6362_u4E3A_u5B57_u7B26_u4E32" class="headerlink" title="转换为字符串"></a>转换为字符串</h4><ol>
<li>要把一个值转换为一个字符串有三种方式。第一种是使用几乎每个值都有的toString()方法，数值、布尔值、对象和字符串值都有 toString()方法。但null和undefined值没有这个方法。可以传递一个参数:输出数值的基数。默认情况下,toString()方法以十进制格式返回数值的字符串表示。</li>
<li>在不知道要转换的值是不是null或undefined的情况下,还可以使用转型函数String(),这个函数能够将任何类型的值转换为字符串：<ul>
<li>如果值有toString()方法,则调用该方法(没有参数)并返回相应的结果;</li>
<li>如果值是 null,则返回”null”;</li>
<li>如果值是 undefined,则返回”undefined”。</li>
</ul>
</li>
<li>可以使用加号操作符把某个值转换为字符串。</li>
</ol>
<h3 id="1-2-7_Object_u7C7B_u578B"><a href="#1-2-7_Object_u7C7B_u578B" class="headerlink" title="1.2.7 Object类型"></a>1.2.7 Object类型</h3><p>&emsp;&emsp;ECMAScript中的对象其实就是一组数据和功能的集合。对象可以通过执行 new 操作符后跟要创建的对象类型的名称来创建。Object 类型是所有它的实例的基础，Object类型所具有的任何属性和方法也同样存在于更具体的对象中。</p>
<p>&emsp;&emsp;Object 的每个实例都具有下列属性和方法。</p>
<ul>
<li><strong>constructor</strong>:保存着用于创建当前对象的函数。对于前面的例子而言,构造函数(constructor)就是 Object()。</li>
<li><strong>hasOwnProperty(propertyName)</strong>:用于检查给定的属性在当前对象实例中(而不是在实例的原型中)是否存在。其中,作为参数的属性名(propertyName)必须以字符串形式指定(例 如:o.hasOwnProperty(“name”))。</li>
<li><strong>isPrototypeOf(object)</strong>:用于检查传入的对象是否是传入对象的原型(第 5 章将讨论原 型)。</li>
<li><strong>propertyIsEnumerable(propertyName)</strong>:用于检查给定的属性是否能够使用for-in语句(本章后面将会讨论)来枚举。与hasOwnProperty()方法一样,作为参数的属性名必须以字符<br>串形式指定。</li>
<li><strong>toLocaleString()</strong>:返回对象的字符串表示,该字符串与执行环境的地区对应。</li>
<li><strong>toString()</strong>:返回对象的字符串表示。</li>
<li><strong>valueOf()</strong>:返回对象的字符串、数值或布尔值表示。通常与 toString()方法的返回值相同。</li>
</ul>
<h2 id="1-3__u64CD_u4F5C_u7B26"><a href="#1-3__u64CD_u4F5C_u7B26" class="headerlink" title="1.3 操作符"></a>1.3 操作符</h2><ol>
<li>如果是 Infinity 与 0 相乘,则结果是 NaN;</li>
<li>如果是 Infinity 被 Infinity 除,则结果是 NaN;</li>
<li>如果是零被零除,则结果是 NaN;</li>
<li>如果是+0 加-0,则结果是+0;</li>
<li>如果是+0 减-0,则结果是0;</li>
</ol>
<h3 id="u76F8_u7B49_u64CD_u4F5C_u7B26_u5BF9_u6BD4"><a href="#u76F8_u7B49_u64CD_u4F5C_u7B26_u5BF9_u6BD4" class="headerlink" title="相等操作符对比"></a>相等操作符对比</h3><ul>
<li>如果有一个操作数是布尔值,则在比较相等性之前先将其转换为数值——false 转换为 0,而true 转换为 1;</li>
<li>如果一个操作数是字符串,另一个操作数是数值,在比较相等性之前先将字符串转换为数值;</li>
<li>如果一个操作数是对象,另一个操作数不是,则调用对象的valueOf()方法,用得到的基本类型值按照前面的规则进行比较;</li>
<li>null 和 undefined 是相等的。</li>
<li>要比较相等性之前,不能将 null 和undefined转换成其他任何值。</li>
<li>如果有一个操作数是NaN,则相等操作符返回false,而不相等操作符返回true。重要提示:即使两个操作数都是NaN,相等操作符也返回false;因为按照规则,NaN 不等于 NaN。</li>
<li>如果两个操作数都是对象,则比较它们是不是同一个对象。如果两个操作数都指向同一个对象,则相等操作符返回 true;否则,返回 false;</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-1__u6807_u8BC6_u7B26"><a href="#1-1__u6807_u8BC6_u7B26" class="headerlink" title="1.1 标识符"></a>1.1 标识符</h2><p>&emsp;&emsp;所谓标识符,就是]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[第10章 Ajax]]></title>
    <link href="http://yoursite.com/2016/05/13/%E7%AC%AC10%E7%AB%A0%20Ajax/"/>
    <id>http://yoursite.com/2016/05/13/第10章 Ajax/</id>
    <published>2016-05-13T10:25:52.000Z</published>
    <updated>2016-05-08T15:08:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p><a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="external">XMLHttpRequest Level 2 使用指南</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="external">浏览器同源政策及其规避方法</a></p>
<h3 id="readyState_u5C5E_u6027_u503C"><a href="#readyState_u5C5E_u6027_u503C" class="headerlink" title="readyState属性值"></a>readyState属性值</h3><ul>
<li>0:未初始化。尚未调用 open()方法。</li>
<li>1:启动。已经调用 open()方法,但尚未调用 send()方法。</li>
<li>2:发送。已经调用 send()方法,但尚未接收到响应。</li>
<li>3:接收。已经接收到部分响应数据。</li>
<li>4:完成。已经接收到全部响应数据,而且已经可以在客户端使用了。</li>
</ul>
<p>&emsp;&emsp; 只要 readyState 属性的值由一个值变成另一个值,都会触发一次 readystatechange 事件。可以利用这个事件来检测每次状态变化后 readyState 的值。通常,我们只对 readyState 值为 4 的阶 段感兴趣,因为这时所有数据都已经就绪。不过,必须在调用 open()之前指定 onreadystatechange 事件处理程序才能确保跨浏览器兼容性。在接收到响应之前还可以调用 abort()方法来取消异步请求，xhr.abort();<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>)&#123;   </span><br><span class="line">         alert(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; &#125;;</span><br><span class="line">xhr.open(method, url, <span class="literal">true</span>); <span class="comment">// true代表异步</span></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="GET_u8BF7_u6C42"><a href="#GET_u8BF7_u6C42" class="headerlink" title="GET请求"></a>GET请求</h3><p>&emsp;&emsp; 使用 GET 请求经常会发生的一个错误,就是查询字符串的格式有问题。查询字符串中每个参数的名 称和值都必须使用 encodeURIComponent()进行编码,然后才能放到 URL 的末尾;而且所有名-值对 儿都必须由和号(&amp;)分隔.下面这个函数可以辅助向现有 URL 的末尾添加查询字符串参数:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addURLParam</span>(<span class="params">url, name, value</span>) </span>&#123;</span><br><span class="line">  url += (url.indexOf(<span class="string">"?"</span>) == -<span class="number">1</span> ? <span class="string">"?"</span> : <span class="string">"&amp;"</span>);</span><br><span class="line">  url += <span class="built_in">encodeURIComponent</span>(name) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">  <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="POST_u8BF7_u6C42"><a href="#POST_u8BF7_u6C42" class="headerlink" title="POST请求"></a>POST请求</h3><p>&emsp;&emsp; 首先将 Content-Type 头部信息设置为 application/x-www-form-urlencoded,也就是表单 提交时的内容类型.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submitData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">            alert(xhr.responseText);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.open(<span class="string">"post"</span>, <span class="string">"postexample.php"</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">  <span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"user-info"</span>); </span><br><span class="line">  xhr.send(serialize(form));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="XMLHttpRequest_2_u7EA7"><a href="#XMLHttpRequest_2_u7EA7" class="headerlink" title="XMLHttpRequest 2级"></a>XMLHttpRequest 2级</h2><p>&emsp;&emsp;老版本的XMLHttpRequest对象有以下几个缺点:</p>
<ul>
<li>只支持文本数据的传送，无法用来读取和上传二进制文件。</li>
<li>传送和接收数据时，没有进度信息，只能提示有没有完成。</li>
<li>受到”同域限制”（Same Origin Policy），只能向同一域名的服务器请求数据。</li>
</ul>
<p>&emsp;&emsp;新版本的XMLHttpRequest对象，针对老版本的缺点，做出了大幅改进</p>
<ul>
<li>可以设置HTTP请求的时限。</li>
<li>可以使用FormData对象管理表单数据。</li>
<li>可以上传文件。</li>
<li>可以请求不同域名下的数据（跨域请求）。</li>
<li>可以获取服务器端的二进制数据。</li>
<li>可以获得数据传输的进度信息。</li>
<li>跨域资源共享（CORS）</li>
</ul>
<h3 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h3><p>&emsp;&emsp;现代 Web 应用中频繁使用的一项功能就是表单数据的序列化,XMLHttpRequest 2 级为此定义了 FormData 类型。FormData 为序列化表单以及创建与表单格式相同的数据(用于通过 XHR 传输)提供 了便利。append()方法接收两个参数:键和值,分别对应表单字段的名字和字段中包含的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">          alert(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status);</span><br><span class="line">    &#125;         </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"post"</span>,<span class="string">"postexample.php"</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"user-info"</span>);</span><br><span class="line">xhr.send(<span class="keyword">new</span> FormData(form));</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;使用 FormData 的方便之处体现在不必明确地在 XHR 对象上设置请求头部。XHR 对象能够识别传入的数据类型是 FormData 的实例,并配置适当的头部信息。</p>
<h2 id="u8DE8_u6E90_u8D44_u6E90_u5171_u4EAB"><a href="#u8DE8_u6E90_u8D44_u6E90_u5171_u4EAB" class="headerlink" title="跨源资源共享"></a>跨源资源共享</h2><p>&emsp;&emsp; 通过 XHR 实现 Ajax 通信的一个主要限制,来源于跨域安全策略。默认情况下,XHR 对象只能访 问与包含它的页面位于同一个域中的资源。这种安全策略可以预防某些恶意行为。</p>
<p>&emsp;&emsp;CORS(Cross-Origin Resource Sharing,跨源资源共享),CORS 背后的基本思想,就是使用自定义的 HTTP 头部让浏览器与服务器进行沟通,从而决定请求或响应是应该成功,还是应该失败。</p>
<p>&emsp;&emsp;比如一个简单的使用 GET 或 POST 发送的请求,它没有自定义的头部,而主体内容是 text/plain。在 发送该请求时,需要给它附加一个额外的 Origin 头部,其中包含请求页面的源信息(协议、域名和端 口),以便服务器根据这个头部信息来决定是否给予响应。下面是 Origin 头部的一个示例:<br>Origin: <a href="http://www.nczonline.net" target="_blank" rel="external">http://www.nczonline.net</a><br>如果服务器认为这个请求可以接受,就在 Access-Control-Allow-Origin 头部中回发相同的源<br>信息(如果是公共资源,可以回发”*“)。例如:<br>    Access-Control-Allow-Origin: <a href="http://www.nczonline.net" target="_blank" rel="external">http://www.nczonline.net</a><br>如果没有这个头部,或者有这个头部但源信息不匹配,浏览器就会驳回请求。正常情况下,浏览器 会处理请求。注意,请求和响应都不包含 cookie 信息。</p>
<h3 id="IE_u5BF9CORS_u7684_u5B9E_u73B0"><a href="#IE_u5BF9CORS_u7684_u5B9E_u73B0" class="headerlink" title="IE对CORS的实现"></a>IE对CORS的实现</h3><p>&emsp;&emsp;微软在 IE8 中引入了 XDR(XDomainRequest)类型。 XDR 与 XHR 的一些不同之 处。</p>
<ul>
<li>cookie 不会随请求发送,也不会随响应返回。</li>
<li>只能设置请求头部信息中的 Content-Type 字段。</li>
<li>不能访问响应头部信息。</li>
<li>只支持GET和POST请求。</li>
</ul>
<h3 id="u540C_u6E90_u7B56_u7565_u7684_u76EE_u7684"><a href="#u540C_u6E90_u7B56_u7565_u7684_u76EE_u7684" class="headerlink" title="同源策略的目的"></a>同源策略的目的</h3><p>&emsp;&emsp;同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>&emsp;&emsp;WebSocket是HTML5开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p>
<h3 id="u4F18_u70B9"><a href="#u4F18_u70B9" class="headerlink" title="优点"></a>优点</h3><p>&emsp;&emsp;服务器与客户端之间交换的数据包档头很小，大概只有2字节。（早期版本7.0）</p>
<p>&emsp;&emsp;服务器可以主动传送数据给客户端。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p><a href="http://www.ru]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[第3章 引用类型]]></title>
    <link href="http://yoursite.com/2016/03/12/%E7%AC%AC3%E7%AB%A0%20%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2016/03/12/第3章 引用类型/</id>
    <published>2016-03-12T09:00:54.000Z</published>
    <updated>2016-05-09T16:17:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u7B2C3_u7AE0__u5F15_u7528_u7C7B_u578B"><a href="#u7B2C3_u7AE0__u5F15_u7528_u7C7B_u578B" class="headerlink" title="第3章 引用类型"></a>第3章 引用类型</h1><p>&emsp;&emsp;引用类型的值(对象)是引用类型的一个实例。在 ECMAScript 中,引用类型是一种数据结构, 用于将数据和功能组织在一起。尽管 ECMAScript 从技术上讲是一门面向对象的语言,但它不具备传统的面向对象语言所支持的类和接口等基本结构。引用类型有时候也被称为对象定义,因为它们描述的是一类对象所具有的属性和方法。<br>􏰜􏰊􏹽􏰞</p>
<h2 id="3-1_Array_u7C7B_u578B"><a href="#3-1_Array_u7C7B_u578B" class="headerlink" title="3.1 Array类型"></a>3.1 Array类型</h2><h3 id="3-1-1__u68C0_u6D4B_u6570_u7EC4"><a href="#3-1-1__u68C0_u6D4B_u6570_u7EC4" class="headerlink" title="3.1.1 检测数组"></a>3.1.1 检测数组</h3><p>&emsp;&emsp;可使用 instanceof 操作符进行检查<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">  <span class="comment">//对数组执行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;instanceof 操作符的问题在于,它假定只有一个全局执行环境。如果网页中包含多个框架,那实 际上就存在两个以上不同的全局执行环境,从而存在两个以上不同版本的 Array 构造函数。如果你从一个框架向另一个框架传入一个数组,那么传入的数组与在第二个框架中原生创建的数组分别具有各自 不同的构造函数。</p>
<p>&emsp;&emsp;ECMAScript 5 新增了 <strong>Array.isArray()方法</strong>。这个方法的目的是最终确定某个值到底是不是数组,而不管它是在哪个全局执行环境中创建的，支持 Array.isArray()方法的浏览器有 IE9+、Firefox 4+、Safari 5+、Opera 10.5+和 Chrome。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value))&#123; <span class="comment">//对数组执行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-1-2__u8F6C_u6362_u65B9_u6CD5"><a href="#3-1-2__u8F6C_u6362_u65B9_u6CD5" class="headerlink" title="3.1.2  转换方法"></a>3.1.2  转换方法</h3><p>&emsp;&emsp;所有对象都具有 toLocaleString()、toString()和 valueOf()方法。其中,调用数组的 toString()方法会返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串。而调用 valueOf()返回的还是数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>]; <span class="comment">// 创建一个包含 3 个字符串的数组</span></span><br><span class="line">alert(colors.toString());<span class="comment">// red,blue,green</span></span><br><span class="line">alert(colors.valueOf());<span class="comment">// ["red", "blue", "green"]</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;数组继承的 toLocaleString()、toString()和 valueOf()方法,在默认情况下都会以逗号分隔的字符串的形式返回数组项。而如果使用 join()方法,则可以使用不同的分隔符来构建这个字符串。join()方法只接收一个参数,即用作分隔符的字符串,然后返回包含所有数组项的字符串,如果数组中的某一项的值是 null 或者 undefined,那么该值在 join()、 toLocaleString()、toString()和 valueOf()方法返回的结果中以空字符串表示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line">alert(colors.join(<span class="string">","</span>));       <span class="comment">//red,green,blue</span></span><br><span class="line">alert(colors.join(<span class="string">"||"</span>));      <span class="comment">//red||green||blue</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-1-3__u6808_u65B9_u6CD5_u548C_u961F_u5217_u65B9_u6CD5"><a href="#3-1-3__u6808_u65B9_u6CD5_u548C_u961F_u5217_u65B9_u6CD5" class="headerlink" title="3.1.3 栈方法和队列方法"></a>3.1.3 栈方法和队列方法</h3><p>&emsp;&emsp;栈是一种 LIFO(Last-In-First-Out, 后进先出)的数据结构,也就是最新添加的项最早被移除。而栈中项的插入(叫做推入)和移除(叫做弹出),只发生在一个位置——栈的顶部。</p>
<ol>
<li><strong>push()：</strong> 可以接收任意数量的参数,把它们逐个添加到数组末尾,并返回修改后数组的长度。</li>
<li><strong>pop()：</strong> 从数组末尾移除最后一项,减少数组的 length 值,然后返回移除的项。</li>
</ol>
<p>&emsp;&emsp;队列数据结构的访问规则是 FIFO(First-In-First-Out, 先进先出)。队列在列表的末端添加项,从列表的前端移除项。</p>
<ol>
<li><strong>shift()：</strong> 它能够移除数组中的第一个项并返回该项,同时将数组长度减 1。结合使用 shift()和 push()方法,可以像使用队列一样使用数组。</li>
<li><strong>unshift()：</strong> unshift()与 shift()的用途相反: 它能在数组前端添加任意个项并返回新数组的长度。因此,同时使用 unshift()和 pop()方法,可以从相反的方向来模拟队列,即在数组的前端添加项,从数组末端移除项。</li>
</ol>
<h3 id="3-1-4__u91CD_u6392_u5E8F_u65B9_u6CD5"><a href="#3-1-4__u91CD_u6392_u5E8F_u65B9_u6CD5" class="headerlink" title="3.1.4 重排序方法"></a>3.1.4 重排序方法</h3><ol>
<li><strong>reverse()：</strong> 反转数组项的顺序。即数组的初始值及顺序是 1、2、3、4、5。而调用数组的 reverse()方法后,其值的顺序变成了 5、4、3、2、1。</li>
<li><strong>sort()：</strong> 默认情况下按升序排列数组项——即最小的值位于最前面,最大的值排在最后面。为了实现排序,sort()方法会调用每个数组项的 toString()转型方法,然后比较得到的字符串,以确定如何排序。即使数组中的每一项都是数值,sort()方法比较的也是字符串。如<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.sort();</span><br><span class="line">alert(values);     <span class="comment">//0,1,10,15,5</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>&emsp;&emsp;sort()方法可以接收一个比较函数作为参数,以便我们指定哪个值位于哪个值的前面。比较函数接收两个参数,如果第一个参数应该位于第二个之前则返回一个负数,如果两个参数相等则返回 0,如果第一个参数应该位于第二个之后则返回一个正数。可以通过返回相反的值来达到升序。对于数值类型或者其 valueOf()方法会返回数值类型的对象类型,可以使用一个更简单的比较函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//升序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value1 - value2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-1-5__u64CD_u4F5C_u65B9_u6CD5"><a href="#3-1-5__u64CD_u4F5C_u65B9_u6CD5" class="headerlink" title="3.1.5 操作方法"></a>3.1.5 操作方法</h3><ol>
<li><p><strong>concat()：</strong> 基于当前数组中的所有项创建一个新数组,即先创建当前数组一个副本,然后将接收到的参数添加到这个副本的末尾,最后返回新构建的数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.concat(<span class="string">"yellow"</span>, [<span class="string">"black"</span>, <span class="string">"brown"</span>]);</span><br><span class="line">alert(colors);     <span class="comment">//red,green,blue</span></span><br><span class="line">alert(colors2);  <span class="comment">//red,green,blue,yellow,black,brown</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>slice()：</strong> 它能够基于当前数组中的一或多个项创建一个新数组。slice()方法可以 接受一或两个参数,即要返回项的起始和结束位置(不包括结束位置的项),slice()方法不会影响原始数组。如果 slice()方法的参数中有一个负数,则用数组长度加上该数来确定相应的位置。例如,在一个包含5项的数组上调用 slice(-2,-1)与调用 slice(3,4)得到的 结果相同。如果结束位置小于起始位置,则返回空数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>, <span class="string">"yellow"</span>, <span class="string">"purple"</span>];</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.slice(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> colors3 = colors.slice(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">alert(colors2);   <span class="comment">//green,blue,yellow,purple</span></span><br><span class="line">alert(colors3);   <span class="comment">//green,blue,yellow</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>splice()：</strong> splice()方法始终都会返回一个数组,该数组中包含从原始数组中删除的项(如果没有删除任何 项,则返回一个空数组)。</p>
<ul>
<li><strong>删除:</strong> 可以删除任意数量的项,只需指定 2 个参数:要删除的第一项的位置和要删除的项数。 例如,splice(0,2)会删除数组中的前两项;</li>
<li><strong>插入:</strong> 可以向指定位置插入任意数量的项,只需提供 3 个参数:起始位置、0(要删除的项数) 和要插入的项。如果要插入多个项,可以再传入第四、第五,以至任意多个项。例如, splice(2,0,”red”,”green”)会从当前数组的位置 2 开始插入字符串”red”和”green”;</li>
<li><strong>替换:</strong> 可以向指定位置插入任意数量的项,且同时删除任意数量的项,只需指定 3 个参数:起 始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如, splice (2,1,”red”,”green”)会删除当前数组位置 2 的项,然后再从位置 2 开始插入字符串 “red”和”green”。</li>
</ul>
</li>
</ol>
<h3 id="3-1-6__u4F4D_u7F6E_u65B9_u6CD5"><a href="#3-1-6__u4F4D_u7F6E_u65B9_u6CD5" class="headerlink" title="3.1.6 位置方法"></a>3.1.6 位置方法</h3><ol>
<li><strong>indexOf()</strong> 和 <strong>lastIndexOf()：</strong> 两个方法都接收 两个参数:要查找的项和(可选的)表示查找起点位置的索引。indexOf()方法从数组的开头(位置 0)开始向后查找,lastIndexOf()方法则从数组的末尾开始向前查找，都返回要查找的项在数组中的位置,或者在没找到的情况下返回-1。使用全等操作符来进行对比，即查找的项必须严格相等(就像使用===一样)，支持它们的浏览器包 括 IE9+、Firefox 2+、Safari 3+、Opera 9.5+和 Chrome。</li>
</ol>
<h3 id="3-1-7__u8FED_u4EE3_u65B9_u6CD5"><a href="#3-1-7__u8FED_u4EE3_u65B9_u6CD5" class="headerlink" title="3.1.7 迭代方法"></a>3.1.7 迭代方法</h3><p>&emsp;&emsp;ECMAScript 5 为数组定义了 5 个迭代方法。每个方法都接收两个参数:要在每一项上运行的函数和 (可选的)运行该函数的作用域对象——影响 this 的值。传入这些方法中的函数会接收三个参数:数组项的值、该项在数组中的位置和数组对象本身,支持这些迭代方法的浏览器有 IE9+、Firefox 2+、Safari 3+、Opera 9.5+和 Chrome。</p>
<ul>
<li>every():对数组中的每一项运行给定函数,如果该函数对每一项都返回 true,则返回 true。</li>
<li>filter():对数组中的每一项运行给定函数,返回该函数会返回 true 的项组成的数组。</li>
<li>forEach():对数组中的每一项运行给定函数。这个方法没有返回值。</li>
<li>map():对数组中的每一项运行给定函数,返回每次函数调用的结果组成的数组。</li>
<li>some():对数组中的每一项运行给定函数,如果该函数对任一项返回 true,则返回 true。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> everyResult = numbers.every(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (item &gt; <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">alert(everyResult); <span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span> someResult = numbers.some(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (item &gt; <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">alert(someResult); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filterResult = numbers.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (item &gt; <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">alert(filterResult); <span class="comment">//[3,4,5,4,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapResult = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line">alert(mapResult);  <span class="comment">//[2,4,6,8,10,8,6,4,2]</span></span><br><span class="line"></span><br><span class="line">numbers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="3-1-8__u5F52_u5E76_u65B9_u6CD5"><a href="#3-1-8__u5F52_u5E76_u65B9_u6CD5" class="headerlink" title="3.1.8 归并方法"></a>3.1.8 归并方法</h3><ol>
<li><strong>reduce()</strong> 和 <strong>reduceRight()：</strong> 这两个方法都会迭 12 代数组的所有项,然后构建一个最终返回的值。传给 reduce()和 reduceRight()的函数接收 4 个参数:前一个值、当前值、项的索引和数组对象。支持游览器 IE9+及其他主流游览器。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> sum = values.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;);</span><br><span class="line">alert(sum); <span class="comment">//15</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第3章 引用类型/1.png" width="300"><br></div>

<div style="text-align:center;margin-bottom:20px;"><br>  <img src="../images/JavaScript高级程序设计/第3章 引用类型/2.png" width="300"><br></div>

<h2 id="3-2_Function_u7C7B_u578B"><a href="#3-2_Function_u7C7B_u578B" class="headerlink" title="3.2 Function类型"></a>3.2 Function类型</h2><p>&emsp;&emsp;函数实际 上是对象。每个函数都是Function 类型的实例,而且都与其他引用类型一样具有属性和方法。由于函数是对象,因此函数名实际上也是一个指向函数对象的指针,不会与某个函数绑定，由于函数名仅仅是指向函数的指针,因此函数名与包含对象指针的其他变量没有什么不同。</p>
<h3 id="3-2-1__u6CA1_u6709_u91CD_u8F7D"><a href="#3-2-1__u6CA1_u6709_u91CD_u8F7D" class="headerlink" title="3.2.1 没有重载"></a>3.2.1 没有重载</h3><p>&emsp;&emsp;声明了两个同名函数,而结果则是后面的函数覆盖了前面的函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addSomeNumber</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num + <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addSomeNumber</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num + <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = addSomeNumber(<span class="number">100</span>); <span class="comment">//300</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-2-2__u51FD_u6570_u58F0_u660E_u4E0E_u51FD_u6570_u8868_u8FBE_u5F0F"><a href="#3-2-2__u51FD_u6570_u58F0_u660E_u4E0E_u51FD_u6570_u8868_u8FBE_u5F0F" class="headerlink" title="3.2.2 函数声明与函数表达式"></a>3.2.2 函数声明与函数表达式</h3><p>&emsp;&emsp;解析器就已经通过一个名为函数声明提升 (function declaration hoisting)的过程,读取并将函数声明添加到执行环境中。至于函数表达式,则必须等到解析器执行到它所在的代码行,才会被解释执行。</p>
<h3 id="3-2-3__u51FD_u6570_u5185_u90E8_u5C5E_u6027"><a href="#3-2-3__u51FD_u6570_u5185_u90E8_u5C5E_u6027" class="headerlink" title="3.2.3 函数内部属性"></a>3.2.3 函数内部属性</h3><p>&emsp;&emsp;在函数内部,有两个特殊的对象:arguments 和 this。其中,arguments是一个类数组对象,包含着传入函数中的所有参数。还有一个名叫 callee 的属性,该属性是一个指针,指向拥有这个 arguments 对象的函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;=<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num-<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;ECMAScript 5 也规范化了另一个函数对象的属性:caller，保存着调用当前函数的函数的引用,如果是在全局作用域中调用当前函数,它的值为 null。inner.caller 就指向 outer()。为了实现更松散的耦合,也可以通过 arguments.callee.caller<br>来访问相同的信息。当函数在严格模式下运行时,访问 arguments.callee 会导致错误。ECMAScript 5 还定义了 arguments.caller 属性,但在严格模式下访问它也会导致错误,而在非严格模式下这个属性始终是 undefined。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    inner();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   alert(inner.caller);</span><br><span class="line">&#125;</span><br><span class="line">outer();</span><br></pre></td></tr></table></figure></p>
<h3 id="3-2-4__u51FD_u6570_u5C5E_u6027_u548C_u65B9_u6CD5"><a href="#3-2-4__u51FD_u6570_u5C5E_u6027_u548C_u65B9_u6CD5" class="headerlink" title="3.2.4 函数属性和方法"></a>3.2.4 函数属性和方法</h3><p>&emsp;&emsp;ECMAScript 中的函数是对象,因此函数也有属性和方法。每个函数都包含两个属性:length 和 prototype。</p>
<ol>
<li><strong>length属性：</strong> 表示函数希望接收的命名参数的个数。</li>
<li><strong>prototype属性：</strong> 对于ECMAScript中的引用类型而言,prototype是保存它们所有实例方法的真正所在。诸如 toString()和 valueOf()等方法实际上都保存在prototype下，在 ECMAScript 5 中,prototype 属性是不可枚举的,因此使用 for-in 无法发现。</li>
<li><p><strong>apply()和 call()方法：</strong> 这两个方法的用途都是在特定的作用域中调用函数,实际上等于设置函数体内 this 对象的值。apply()方法接收两个参数:一个是在其中运行函数的作用域,另一个是参数数组。第二个参数可以是 Array 的实例,也可以是 arguments 对象。call()方法区别仅在于接收参数的方式不同,传递给函数的参数必须逐个列举出来。这两个方法真正强大的地方是能够扩充函数赖以运行的作用域。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.color = <span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123; color: <span class="string">"blue"</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line">sayColor();<span class="comment">//red</span></span><br><span class="line">sayColor.call(<span class="keyword">this</span>);<span class="comment">//red</span></span><br><span class="line">sayColor.call(<span class="built_in">window</span>);<span class="comment">//red</span></span><br><span class="line">sayColor.call(o);<span class="comment">//blue</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>bind()：</strong> 这个方法会创建一个函数的实例,其 this 值会被绑定到传给 bind()函数的值。支持 bind()方法的浏览器有 IE9+等主流游览器。</p>
</li>
</ol>
<h2 id="3-3__u57FA_u672C_u5305_u88C5_u7C7B_u578B"><a href="#3-3__u57FA_u672C_u5305_u88C5_u7C7B_u578B" class="headerlink" title="3.3 基本包装类型"></a>3.3 基本包装类型</h2><p>&emsp;&emsp;ECMAScript提供了3个特殊的引用类型:Boolean、Number 和 String,实际上,每当读取一个基本类型值的时候,后台就会创建一个对应的基本包装类型的对象,从而让我们能够调用一些方法来操作这些数据。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">"some text"</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></p>
<p>基本类型值不是对象,因而从逻辑上 讲它们不应该有方法(尽管如我们所愿,它们确实有方法)。其实,为了让我们实现这种直观的操作,后台已经自动完成了一系列的处理。当第二行代码访问 s1 时,访问过程处于一种读取模式,也就是要 从内存中读取这个字符串的值。而在读取模式中访问字符串时,后台都会自动完成下列处理。<br>(1) 创建 String 类型的一个实例;<br>(2) 在实例上调用指定的方法;<br>(3) 销毁这个实例。<br>可以将以上三个步骤想象成是执行了下列 ECMAScript 代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"some text"</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">2</span>);</span><br><span class="line">s1 = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;引用类型与基本包装类型的主要区别就是对象的生存期。使用 new 操作符创建的引用类型的实例, 在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象,则只存在于一行代码的执行瞬间,然后立即被销毁。这意味着我们不能在运行时为基本类型值添加属性和方法。来看下面的例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">"some text"</span>;</span><br><span class="line">s1.color = <span class="string">"red"</span>;</span><br><span class="line">alert(s1.color);   <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;要注意的是,使用 new 调用基本包装类型的构造函数,与直接调用同名的转型函数是不一样的.在这个例子中,变量 number 中保存的是基本类型的值 25,而变量 obj 中保存的是 Number 的实 例。例如:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="string">"25"</span>;</span><br><span class="line"><span class="keyword">var</span> number = <span class="built_in">Number</span>(value); <span class="comment">//转型函数</span></span><br><span class="line">alert(<span class="keyword">typeof</span> number); <span class="comment">//"number"</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Number</span>(value); <span class="comment">//构造函数</span></span><br><span class="line">alert(<span class="keyword">typeof</span> obj); <span class="comment">//"object"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-3-1_String_u7C7B_u578B"><a href="#3-3-1_String_u7C7B_u578B" class="headerlink" title="3.3.1 String类型"></a>3.3.1 String类型</h3><p>&emsp;&emsp;String 类型是字符串的对象包装类型,String 类型的每个实例都有一个 length 属性,表示字符串中包含多个字符。</p>
<ol>
<li><strong>charAt():</strong> 以单字符字符串的形式返回给定位置的那个字符；</li>
<li><strong>charCodeAt():</strong> 返回给定位置的那个字符的编码；</li>
<li><p><strong>concat()：</strong> 用于将一或多个字符串拼接起来,返回拼接得到的新字符串，不过实践中使用更多的还是加号操作符(+)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stringValue = <span class="string">"hello "</span>;</span><br><span class="line"><span class="keyword">var</span> result = stringValue.concat(<span class="string">"world"</span>); alert(result); <span class="comment">//"hello world"</span></span><br><span class="line">alert(stringValue); <span class="comment">//"hello"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>slice()：</strong> 接受一或两个参数。第一个参数指定子字符串的开始位置,第二个参数(在指定的情况下)表示子字符串到哪里结束。</p>
</li>
<li><strong>substring()：</strong> 参数同slice()方法相同。</li>
<li><strong>substr()：</strong> 第二个参数指定的则是返回的字符个数。如果没有给这些方法传递第二个参数,则将字符串的长度作为结束位置。以上三个方法不会修改字符串本身的值——它们只是 返回一个基本类型的字符串值,对原始字符串没有任何影响。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stringValue = <span class="string">"hello world"</span>;</span><br><span class="line">alert(stringValue.slice(<span class="number">3</span>));<span class="comment">//"lo world"</span></span><br><span class="line">alert(stringValue.substring(<span class="number">3</span>));<span class="comment">//"lo world"</span></span><br><span class="line">alert(stringValue.substr(<span class="number">3</span>));<span class="comment">//"lo world"</span></span><br><span class="line">alert(stringValue.slice(<span class="number">3</span>, <span class="number">7</span>));<span class="comment">//"lo w"</span></span><br><span class="line">alert(stringValue.substring(<span class="number">3</span>,<span class="number">7</span>));<span class="comment">//"lo w"</span></span><br><span class="line">alert(stringValue.substr(<span class="number">3</span>, <span class="number">7</span>));<span class="comment">//"lo worl"</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>&emsp;&emsp;在传递给这些方法的参数是负值的情况下,它们的行为就不尽相同了。其中,slice()方法会将传入的负值与字符串的长度相加,substr()方法将负的第一个参数加上字符串的长度,而将负的第二个参数转换为0。最后,substring()方法会把所有负值参数都转换为0。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stringValue = <span class="string">"hello world"</span>;</span><br><span class="line">alert(stringValue.slice(-<span class="number">3</span>));<span class="comment">//"rld"</span></span><br><span class="line">alert(stringValue.substring(-<span class="number">3</span>));<span class="comment">//"hello world"</span></span><br><span class="line">alert(stringValue.substr(-<span class="number">3</span>));<span class="comment">//"rld"</span></span><br><span class="line">alert(stringValue.slice(<span class="number">3</span>, -<span class="number">4</span>));<span class="comment">//"lo w"</span></span><br><span class="line">alert(stringValue.substring(<span class="number">3</span>, -<span class="number">4</span>)); <span class="comment">//"hel"</span></span><br><span class="line">alert(stringValue.substr(<span class="number">3</span>, -<span class="number">4</span>)); <span class="comment">//""(空字符串)</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;当第二个参数是负值时,这三个方法的行为各不相同。slice()方法会把第二个参数转换为 7,这 就相当于调用了 slice(3,7),因此返回”lo w”。substring()方法会把第二个参数转换为 0,使调 用变成了 substring(3,0),而由于这个方法会将较小的数作为开始位置,将较大的数作为结束位置, 因此最终相当于调用了 substring(0,3)。substr()也会将第二个参数转换为 0,这也就意味着返回 包含零个字符的字符串,也就是一个空字符串。</p>
<ol>
<li><strong>trim()方法：</strong> ECMAScript 5 为所有字符串定义了 trim()方法。这个方法会创建一个字符串的副本,删除前置及 后缀的所有空格,然后返回结果。</li>
<li><strong>indexOf()和lastIndexOf():</strong> 从字符串中查找子字符串.</li>
<li><strong>toLowerCase()和toUpperCase()：</strong> 大小写转换。</li>
<li><strong>match()：</strong> 字符串中匹配模式的方法，match()方法只接受一个参数,要么是一个正则表达式,要么是一个 RegExp 对象。</li>
<li><strong>localeCompare()：</strong> 比较两个字符串<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stringValue = <span class="string">"yellow"</span>; alert(stringValue.localeCompare(<span class="string">"brick"</span>)); <span class="comment">//1</span></span><br><span class="line">alert(stringValue.localeCompare(<span class="string">"yellow"</span>)); <span class="comment">//0</span></span><br><span class="line">alert(stringValue.localeCompare(<span class="string">"zoo"</span>)); <span class="comment">//-1</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-4__u5355_u4F53_u5185_u7F6E_u5BF9_u8C61"><a href="#3-4__u5355_u4F53_u5185_u7F6E_u5BF9_u8C61" class="headerlink" title="3.4 单体内置对象"></a>3.4 单体内置对象</h2><p>&emsp;&emsp;ECMA-262 对内置对象的定义是:“由 ECMAScript 实现提供的、不依赖于宿主环境的对象,这些对 象在 ECMAScript 程序执行之前就已经存在了。开发人员不必显式地实例化内置对象,因为它们已经实例化了。前面我们已经介绍了大多数内置对象,例如 Object、Array 和 String。<br>ECMA-262 还定义了两个单体内置对象:Global 和 Math。</p>
<h3 id="3-4-1_Global_u5BF9_u8C61"><a href="#3-4-1_Global_u5BF9_u8C61" class="headerlink" title="3.4.1 Global对象"></a>3.4.1 Global对象</h3><p>&emsp;&emsp;没有全 局变量或全局函数;所有在全局作用域中定义的属性和函数,都是 Global 对象的属性。诸如 isNaN()、isFinite()、parseInt()以及 parseFloat()(<strong>注意：</strong> 这四个方法在ES6中全部都添加到Number对象上，作为Number对象的方法使用了)。<br>Global 对象的 encodeURI()和encodeURIComponent()方法可以对URI进行编码,以便发送给浏览器。有效的 URI 中不能包含某些字符,例如空格。这两个 URI 编码方法就可以对 URI 进行编码,它们用特殊的 UTF-8 编码替换所有无效的字符, 从而让浏览器能够接受和理解。</p>
<ol>
<li><strong>encodeURI()和encodeURIComponent()：</strong> encodeURI()主要用于整个 URI(例如,<a href="http://www.wrox.com/illegal" target="_blank" rel="external">http://www.wrox.com/illegal</a> value.htm),而 encodeURIComponent()主要用于对 URI 中的某一段(例如前面 URI 中的 illegal value.htm)进行编码。 它们的主要区别在于,encodeURI()不会对本身属于 URI 的特殊字符进行编码,例如冒号、正斜杠、问号和井字号;而 encodeURIComponent()则会对它发现的任何非标准字符进行编码。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uri = <span class="string">"http://www.wrox.com/illegal value.htm#start"</span>;</span><br><span class="line"><span class="comment">//"http://www.wrox.com/illegal%20value.htm#start"</span></span><br><span class="line">alert(<span class="built_in">encodeURI</span>(uri));</span><br><span class="line"><span class="comment">//"http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start"</span></span><br><span class="line">alert(<span class="built_in">encodeURIComponent</span>(uri));</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>&emsp;&emsp;一般来说,我们使用 encodeURIComponent()方法的时候要比使用 encodeURI()更多,因为在实践中更常见的是对查询字符串参数而不是对基础 URI 进行编码。</p>
<h3 id="3-4-2_Math_u5BF9_u8C61"><a href="#3-4-2_Math_u5BF9_u8C61" class="headerlink" title="3.4.2 Math对象"></a>3.4.2 Math对象</h3><ul>
<li>Math.ceil()执行向上舍入,即它总是将数值向上舍入为最接近的整数;</li>
<li>Math.floor()执行向下舍入,即它总是将数值向下舍入为最接近的整数;</li>
<li>Math.round()执行标准舍入,即它总是将数值四舍五入为最接近的整数。</li>
</ul>
<h3 id="3-5__u7C7B_u578B_u8F6C_u6362"><a href="#3-5__u7C7B_u578B_u8F6C_u6362" class="headerlink" title="3.5 类型转换"></a>3.5 类型转换</h3><p><a href="http://javascript.ruanyifeng.com/grammar/conversion.html" target="_blank" rel="external">http://javascript.ruanyifeng.com/grammar/conversion.html</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[] + [] <span class="comment">// ""</span></span><br><span class="line">&#123;&#125; + [] <span class="comment">// 0</span></span><br><span class="line">+ []    <span class="comment">// 0</span></span><br><span class="line">(&#123;&#125;) + []<span class="comment">// "[object Object]"</span></span><br><span class="line">&#123;&#125; + &#123;&#125;<span class="comment">// "[object Object]"</span></span><br><span class="line">(&#123;&#125;) + &#123;&#125;<span class="comment">//"[object Object][object Object]"</span></span><br><span class="line">(&#123;&#125; + &#123;&#125;)<span class="comment">// "[object Object][object Object]"</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u7B2C3_u7AE0__u5F15_u7528_u7C7B_u578B"><a href="#u7B2C3_u7AE0__u5F15_u7528_u7C7B_u578B" class="headerlink" title="第3章 引用类型"></a>第3章 ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[第2章 变量、作用域和内存]]></title>
    <link href="http://yoursite.com/2016/02/24/%E7%AC%AC2%E7%AB%A0%20%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98/"/>
    <id>http://yoursite.com/2016/02/24/第2章 变量、作用域和内存/</id>
    <published>2016-02-24T15:29:54.000Z</published>
    <updated>2016-05-05T04:25:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="2-1__u57FA_u672C_u7C7B_u578B_u548C_u5F15_u7528_u7C7B_u578B_u7684_u503C"><a href="#2-1__u57FA_u672C_u7C7B_u578B_u548C_u5F15_u7528_u7C7B_u578B_u7684_u503C" class="headerlink" title="2.1 基本类型和引用类型的值"></a>2.1 基本类型和引用类型的值</h2><p>&emsp;&emsp;ECMAScript变量包含两种不同数据类型的值:基本类型值和引用类型值。基本类型值指的是简单的数据段,而引用类型值指那些可能由多个值构成的对象。</p>
<p>&emsp;&emsp;在将一个值赋给变量时,解析器必须确定这个值是基本类型值还是引用类型值。第3章讨论了5种基本数据类型:Undefined、Null、Boolean、Number和String。这5种基本数据类型是按值访问的,因为可以操作保存在变量中的实际的值。</p>
<h3 id="2-1-1__u4F20_u9012_u53C2_u6570"><a href="#2-1-1__u4F20_u9012_u53C2_u6570" class="headerlink" title="2.1.1 传递参数"></a>2.1.1 传递参数</h3><p>&emsp;&emsp;ECMAScript 中所有函数的参数都是按值传递的。也就是说,把函数外部的值复制给函数内部的参 数,就和把值从一个变量复制到另一个变量一样。基本类型值的传递如同基本类型变量的复制一样,而 引用类型值的传递,则如同引用类型变量的复制一样。有不少开发人员在这一点上可能会感到困惑,因 为访问变量有按值和按引用两种方式,而参数只能按值传递。</p>
<p>&emsp;&emsp;在向参数传递基本类型的值时,被传递的值会被复制给一个局部变量(即命名参数,或者用 ECMAScript 的概念来说,就是 arguments 对象中的一个元素)。在向参数传递引用类型的值时,会把 这个值在内存中的地址复制给一个局部变量,因此这个局部变量的变化会反映在函数的外部。</p>
<h3 id="2-1-2__u68C0_u6D4B_u7C7B_u578B"><a href="#2-1-2__u68C0_u6D4B_u7C7B_u578B" class="headerlink" title="2.1.2 检测类型"></a>2.1.2 检测类型</h3><p>&emsp;&emsp;要检测一个变量是不是基本数据类型? typeof 操作符是最佳的工具。说得更具体一 点,typeof 操作符是确定一个变量是字符串、数值、布尔值,还是 undefined 的最佳工具。如果变 量的值是一个对象或 null,则 typeof 操作符会像下面例子中所示的那样返回”object”。</p>
<p>&emsp;&emsp;可通过instanceof操作符来对引用类型进行检查<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result = variable <span class="keyword">instanceof</span> constructor</span><br><span class="line">alert(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// 变量 person 是 Object 吗?</span></span><br><span class="line">alert(colors <span class="keyword">instanceof</span> <span class="built_in">Array</span>);  <span class="comment">// 变量 colors 是 Array 吗?</span></span><br><span class="line">alert(pattern <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>);  <span class="comment">//变量pattern是RegExp吗?</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;根据规定,所有引用类型的值都是 Object 的实例。因此,在检测一个引用类型值和Object构造函数时,instanceof 操作符始终会返回 true。当然,如果使用 instanceof 操作符检测基本类型的值,则该操作符始终会返回false,因为基本类型不是对象。</p>
<h2 id="2-2__u6267_u884C_u73AF_u5883_u53CA_u4F5C_u7528_u57DF"><a href="#2-2__u6267_u884C_u73AF_u5883_u53CA_u4F5C_u7528_u57DF" class="headerlink" title="2.2 执行环境及作用域"></a>2.2 执行环境及作用域</h2><p>&emsp;&emsp;执行环境(execution context)是 JavaScript中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据,决定了它们各自的行为。每个执行环境都有一个与之关联的变量对象(variable object),环境中定义的所有变量和函数都保存在这个对象中。</p>
<p>&emsp;&emsp;每个函数都有自己的执行环境。当执行流进入一个函数时,函数的环境就会被推入一个环境栈中。而在函数执行之后,栈将其环境弹出,把控制权返回给之前的执行环境。ECMAScript 程序中的执行流正是由这个方便的机制控制着。</p>
<p>&emsp;&emsp;当代码在一个环境中执行时,会创建变量对象的一个作用域链(scope chain)。作用域链的用途,是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端,始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数,则将其活动对象(activation object)作为变量对象。活动对象在最开始时只包含一个变量,即arguments对象(这个对象在全局环境中是不存在的)。作用域链中的下一个变量对象来自包含(外部)环境,而再下一个变量对象则来自下一个包含环境。这样,一直延续到全局执行环境;全局执行环境的变量对象始终都是作用域链中的最后一个对象。</p>
<h3 id="2-2-1__u5EF6_u957F_u4F5C_u7528_u57DF_u94FE"><a href="#2-2-1__u5EF6_u957F_u4F5C_u7528_u57DF_u94FE" class="headerlink" title="2.2.1 延长作用域链"></a>2.2.1 延长作用域链</h3><p>&emsp;&emsp;虽然执行环境的类型总共只有两种——全局和局部(函数)可通过下面语句在作用域链的前端临时增加一个变量对象来延长作用域链。</p>
<ul>
<li>try-catch 语句的 catch 块;</li>
<li>with 语句。</li>
</ul>
<h2 id="2-3__u5783_u573E_u6536_u96C6"><a href="#2-3__u5783_u573E_u6536_u96C6" class="headerlink" title="2.3 垃圾收集"></a>2.3 垃圾收集</h2><p>&emsp;&emsp;JavaScript 具有自动垃圾收集机制,也就是说,执行环境会负责管理代码执行过程中使用的内存。</p>
<h3 id="2-3-1__u6807_u8BB0_u6E05_u9664"><a href="#2-3-1__u6807_u8BB0_u6E05_u9664" class="headerlink" title="2.3.1 标记清除"></a>2.3.1 标记清除</h3><p>&emsp;&emsp;JavaScript 中最常用的垃圾收集方式是标记清除(mark-and-sweep)。垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记(当然,可以使用任何标记方式)。然后,它会去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记的变量将被视为准备删除的变量,原因是环境中的变量已经无法访问到这些变量了。最后,垃圾收集器完成内存清除工作,销毁那些带标记的值并回收它们所占用的内存空间。</p>
<h3 id="2-3-2__u5F15_u7528_u8BA1_u6570"><a href="#2-3-2__u5F15_u7528_u8BA1_u6570" class="headerlink" title="2.3.2 引用计数"></a>2.3.2 引用计数</h3><p>&emsp;&emsp;另一种垃圾收集算法是“引用计数”,这种算法的思想是跟踪记录所有值被引用的次数。JavaScript<br>引擎目前都不再使用这种算法;但在 IE 中访问非原生 JavaScript 对象(如 DOM 元素)时,这种算法仍然可能会导致问题。</p>
<h3 id="2-3-3__u7BA1_u7406_u5185_u5B58"><a href="#2-3-3__u7BA1_u7406_u5185_u5B58" class="headerlink" title="2.3.3 管理内存"></a>2.3.3 管理内存</h3><p>&emsp;&emsp;解除引用(dereferencing)不仅有助于消除循环引用现象,而且对垃圾收集也有好处。为了确保有效地回收内存,应该及时解除不再使用的全局对象、全局对象属性以及循环引用变量的引用。</p>
<h2 id="2-4__u5C0F_u7ED3"><a href="#2-4__u5C0F_u7ED3" class="headerlink" title="2.4 小结"></a>2.4 小结</h2><p>&emsp;&emsp;JavaScript 变量可以用来保存两种类型的值:基本类型值和引用类型值。基本类型的值源自以下5种基本数据类型:Undefined、Null、Boolean、Number 和 String。基本类型值和引用类型值具 有以下特点:</p>
<ul>
<li>基本类型值在内存中占据固定大小的空间,因此被保存在栈内存中;</li>
<li>从一个变量向另一个变量复制基本类型的值,会创建这个值的一个副本;</li>
<li>引用类型的值是对象,保存在堆内存中;</li>
<li>包含引用类型值的变量实际上包含的并不是对象本身,而是一个指向该对象的指针;</li>
<li>从一个变量向另一个变量复制引用类型的值,复制的其实是指针,因此两个变量最终都指向同<br>一个对象;</li>
<li>确定一个值是哪种基本类型可以使用 typeof 操作符,而确定一个值是哪种引用类型可以使用 instanceof 操作符。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="2-1__u57FA_u672C_u7C7B_u578B_u548C_u5F15_u7528_u7C7B_u578B_u7684_u503C"><a href="#2-1__u57FA_u672C_u7C7B_u578B_u548C_u5F15_u7528_u7C]]>
    </summary>
    
  </entry>
  
</feed>
